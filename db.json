{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/fluid/source/css/gitalk.css","path":"css/gitalk.css","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/highlight-dark.styl","path":"css/highlight-dark.styl","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/highlight.styl","path":"css/highlight.styl","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/default.png","path":"img/default.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/fluid.png","path":"img/fluid.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/loading.gif","path":"img/loading.gif","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/police_beian.png","path":"img/police_beian.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/boot.js","path":"js/boot.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/color-schema.js","path":"js/color-schema.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/img-lazyload.js","path":"js/img-lazyload.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/events.js","path":"js/events.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/leancloud.js","path":"js/leancloud.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/plugins.js","path":"js/plugins.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/xml/local-search.xml","path":"xml/local-search.xml","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/touxiang.png","path":"img/touxiang.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/backend.png","path":"img/backend.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/wechatQR.png","path":"img/wechatQR.png","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"e213ad948e27461fd368ec3be696823b0a2bc0fe","modified":1669458752839},{"_id":"themes/landscape/.npmignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1666793712684},{"_id":"themes/landscape/_config.yml","hash":"79ac6b9ed6a4de5a21ea53fc3f5a3de92e2475ff","modified":1666793724776},{"_id":"themes/landscape/package.json","hash":"544f21a0b2c7034998b36ae94dba6e3e0f39f228","modified":1666793722605},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1666793712692},{"_id":"themes/landscape/README.md","hash":"37fae88639ef60d63bd0de22314d7cc4c5d94b07","modified":1666793722614},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1666793722291},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1666793724779},{"_id":"themes/landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1666793724781},{"_id":"themes/landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1666793724778},{"_id":"themes/landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1666793724783},{"_id":"themes/landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1666793724784},{"_id":"themes/landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1666793724785},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1666793724786},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1666793724787},{"_id":"themes/landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1666793724788},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1666793724791},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1666793724790},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1666793724789},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1666793716836},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1666793716840},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1666793716846},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1666793722288},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1666793716848},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1666793716845},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1666793716849},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1666793716852},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1666793716833},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"d0d753d39038284d52b10e5075979cc97db9cd20","modified":1666793716832},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"950ddd91db8718153b329b96dc14439ab8463ba5","modified":1666793716834},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1666793716841},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"aad6312ac197d6c5aaf2104ac863d7eba46b772a","modified":1666793716843},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1666793716838},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"5abf77aec957d9445fc71a8310252f0013c84578","modified":1666793716844},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1666793716843},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"7e749050be126eadbc42decfbea75124ae430413","modified":1666793716845},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1666793716840},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1666793716835},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1666793716850},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1666793716847},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1666793716851},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1666793716850},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1666793716853},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1666793720201},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1666793723209},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1666793723419},{"_id":"themes/landscape/source/css/_variables.styl","hash":"628e307579ea46b5928424313993f17b8d729e92","modified":1666793723210},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1666793723205},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1666793720206},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1666793723207},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1666793723206},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1666793716830},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1666793720329},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1666793716839},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1666793722602},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1666793722598},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1666793716841},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1666793722600},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1666793716854},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1666793716842},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1666793716851},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1666793723216},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1666793723215},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1666793716847},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1666793723212},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1666793723221},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1666793723220},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1666793723214},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1666793723414},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1666793723413},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1666793723416},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1666793723417},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1666793723218},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1666793723412},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1666793723201},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1666793720200},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1666793723203},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1666793716828},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1666793716827},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1666793724770},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1666793722359},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1666793722360},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1666793722361},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1666793724174},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1666793722283},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1666793723863},{"_id":"themes/cactus/.gitignore","hash":"72267ee409a324fc197c150b3c4bf28b87b709a8","modified":1666530671000},{"_id":"themes/cactus/.jshintrc","hash":"2548bd6ce44422edc7e6f9f68061ab47f26c4f57","modified":1666530671000},{"_id":"themes/cactus/gulpfile.js","hash":"e60630581a5ce8ec2100e7d6d50db71aef654c39","modified":1666530671000},{"_id":"themes/cactus/_config.yml","hash":"3f8355fb623f19d2b287289ce5d7c7282122d142","modified":1666795896556},{"_id":"themes/cactus/LICENSE","hash":"346ece39a983b0e7858c11f785cd846cef9eb875","modified":1666530671000},{"_id":"themes/cactus/package.json","hash":"9d9dfe0e611e69c0db7a7de193a03a253263d504","modified":1666530671000},{"_id":"themes/cactus/.stylintrc","hash":"eb5f48e83657928cb0cbee031373b2cd36ca0083","modified":1666530671000},{"_id":"themes/cactus/languages/ar.yml","hash":"81a88b0593fc89de3118d686681b1f69883c847b","modified":1666530671000},{"_id":"themes/cactus/languages/ca.yml","hash":"b79dd2c21dc6697c635e92db1f661a4b8d5d2305","modified":1666530671000},{"_id":"themes/cactus/README.md","hash":"778ff0b9caf666d2c0dc3413e26ffb862f354173","modified":1666530671000},{"_id":"themes/cactus/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1666530671000},{"_id":"themes/cactus/languages/fr.yml","hash":"5c07406998f19d219a5a7b65c0d88b6b023f85b2","modified":1666530671000},{"_id":"themes/cactus/languages/es.yml","hash":"2b1fc8b0d636123e9ee39017fa20053bd1913a5a","modified":1666530671000},{"_id":"themes/cactus/languages/it.yml","hash":"62800bcae1f2d2454f87f4bcf4d7593848424f61","modified":1666530671000},{"_id":"themes/cactus/languages/en.yml","hash":"6a84970bf69c3e9490e5382747ca2b4c4b4dccde","modified":1666530671000},{"_id":"themes/cactus/languages/fa.yml","hash":"63f32e50953af1c4bd0308a4fca5862b5287c2cb","modified":1666530671000},{"_id":"themes/cactus/languages/kr.yml","hash":"651fb83991c91b13b53ed55740e5402cf0f1c5e8","modified":1666530671000},{"_id":"themes/cactus/languages/nl.yml","hash":"ac0573352ad2c737a7686bcca498b985e7bd6447","modified":1666530671000},{"_id":"themes/cactus/languages/de.yml","hash":"43b2f4e078b042aaae0377a4235216a51ed82e0d","modified":1666530671000},{"_id":"themes/cactus/languages/pt-br.yml","hash":"4859aba788a050c2d5d0b997693b0c8c24b349f7","modified":1666530671000},{"_id":"themes/cactus/languages/tr.yml","hash":"2702914007e6bade9d6861078c0e179ac05bf48c","modified":1666530671000},{"_id":"themes/cactus/languages/pl.yml","hash":"8a2d6dc874d86c38d42c2c861c39590647b5d536","modified":1666530671000},{"_id":"themes/cactus/languages/ru.yml","hash":"81b57fcd1977ef534f4bf303dbc1b4710cc7f057","modified":1666530671000},{"_id":"themes/cactus/layout/404.ejs","hash":"b911da998c160cceb8cd7c4dae709a1374ed2491","modified":1666530671000},{"_id":"themes/cactus/languages/vi.yml","hash":"f84893c3ec3e45875c90069e14b17ed3016ed973","modified":1666530671000},{"_id":"themes/cactus/languages/zh-CN.yml","hash":"d016060817311addb4c528de440126b975038c31","modified":1666530671000},{"_id":"themes/cactus/languages/zh-TW.yml","hash":"2f4e050c9b35a67f4a7278cec3a949533c2ac16a","modified":1666530671000},{"_id":"themes/cactus/layout/index.ejs","hash":"054397351b38f2ae11f15b17baa1a6753ab1ea9d","modified":1666530671000},{"_id":"themes/cactus/layout/archive.ejs","hash":"5a23d506dd65f9b5fd1d44a73d5e04c935a899e2","modified":1666530671000},{"_id":"themes/cactus/scripts/errror_404.js","hash":"f83b290e47cb78a2754152fccc34e571a72087bd","modified":1666530671000},{"_id":"themes/cactus/layout/layout.ejs","hash":"8504004f2ed78914f806c6699d9bd722318cbe56","modified":1666530671000},{"_id":"themes/cactus/scripts/cdn.js","hash":"887edec364d51efa7c524446483188c6ad05adaf","modified":1666530671000},{"_id":"themes/cactus/scripts/merge-configs.js","hash":"2048c3415d96b17b9d84aa44bc0c25f1210525f8","modified":1666530671000},{"_id":"themes/cactus/scripts/page_title.js","hash":"fa662dbdb82779af1b95e35ed7ccdf4866a53dee","modified":1666530671000},{"_id":"themes/cactus/scripts/thumbnail.js","hash":"df8829fd8c3119650037eba5ec11bdce06acff9d","modified":1666530671000},{"_id":"themes/cactus/layout/post.ejs","hash":"f9149f294e6142437c58784c41f1d082a61c8b82","modified":1666530671000},{"_id":"themes/cactus/layout/page.ejs","hash":"c5465d5315a7544aa466b01fd8cfb62917a8bb1d","modified":1666530671000},{"_id":"themes/cactus/scripts/meta.js","hash":"654868666b6573b2cee7e750b47ad8a3c2ee13a0","modified":1666530671000},{"_id":"themes/cactus/layout/_partial/comments.ejs","hash":"4e75035a427fd137ae7f12940209e8e97845df3b","modified":1666530671000},{"_id":"themes/cactus/layout/_partial/search.ejs","hash":"8b4bf9cf5db0ce762a31fc3baae0f2fc004bece4","modified":1666530671000},{"_id":"themes/cactus/layout/_partial/footer.ejs","hash":"12fd63b51472c9c5b8b7d167eb1a96bf1d686c20","modified":1666530671000},{"_id":"themes/cactus/layout/_partial/pagination.ejs","hash":"23bf862b3b8a3cd831850504d9b5a24d21b005e7","modified":1666530671000},{"_id":"themes/cactus/layout/_partial/header.ejs","hash":"0e06ee826de1af22a63626456ceb8f2b6c0d1555","modified":1666530671000},{"_id":"themes/cactus/layout/_partial/head.ejs","hash":"95526bec071998144ee0b0fc33f39bb74e5e9c4f","modified":1666530671000},{"_id":"themes/cactus/layout/_partial/scripts.ejs","hash":"a901e3c89e4cd1d20a87bfc683b64b6818275946","modified":1666530671000},{"_id":"themes/cactus/source/css/_fonts.styl","hash":"354809b5a64e8a47a66c66fd1a28ac597c1460a6","modified":1666530671000},{"_id":"themes/cactus/source/css/_variables.styl","hash":"69d9c5e95edcaee5ccd8218262b989ce721cce79","modified":1666530671000},{"_id":"themes/cactus/layout/_partial/styles.ejs","hash":"c6bc7e8a422c5bb57f88fed1d1b0694d03e24e74","modified":1666530671000},{"_id":"themes/cactus/source/css/_mixins.styl","hash":"1a9e309523df9685e8d088dcff0a809c58e2c392","modified":1666530671000},{"_id":"themes/cactus/source/css/_extend.styl","hash":"b6a4e5905a7515dda66919167531a5ab2b3d1fe2","modified":1666530671000},{"_id":"themes/cactus/source/css/style.styl","hash":"5d8afa50dd27d083e09d3b09106f98de46e3c7d0","modified":1666530671000},{"_id":"themes/cactus/source/css/_util.styl","hash":"2bfeb2e2605dd5235693b00c71a212646d2e0410","modified":1666530671000},{"_id":"themes/cactus/source/css/rtl.styl","hash":"ff8700e1626feeb53d905a2df2777bda7d1eca50","modified":1666530671000},{"_id":"themes/cactus/source/js/main.js","hash":"619ac6529d140711e3b14f739a192bb31c4824ff","modified":1666530671000},{"_id":"themes/cactus/source/images/apple-touch-icon.png","hash":"57e2def34682655f41a0be2d083f16765ba7858b","modified":1666530671000},{"_id":"themes/cactus/source/js/search.js","hash":"914a2ce72fb325106c61600200be823b72bfb39f","modified":1666530671000},{"_id":"themes/cactus/source/images/favicon.ico","hash":"189f9842bcb79a6f8f9e8445bc8bbd773443826b","modified":1666530671000},{"_id":"themes/cactus/source/images/favicon-192x192.png","hash":"96e6fcbbb13a5914a6131391e210eb7dfd13d692","modified":1666530671000},{"_id":"themes/cactus/layout/_partial/post/gallery.ejs","hash":"9aecd8908e8a684f33dc20c02497c0f1774137c7","modified":1666530671000},{"_id":"themes/cactus/layout/_partial/post/actions_desktop.ejs","hash":"aa6218d8d5af1e26e7a0d805b1ea864eca2b88c5","modified":1666530671000},{"_id":"themes/cactus/layout/_partial/post/category.ejs","hash":"b5bfa049f17868fb09d9d2a7e1d5279fa0381d37","modified":1666530671000},{"_id":"themes/cactus/layout/_partial/post/actions_mobile.ejs","hash":"79b234ff3c264e66b2e71c819228e62bf92b48e4","modified":1666530671000},{"_id":"themes/cactus/layout/_partial/post/title.ejs","hash":"a060f1c6e3718494a6b1d0e1981ea0bf4e549828","modified":1666530671000},{"_id":"themes/cactus/layout/_partial/post/date.ejs","hash":"6f2d1aa9562df343b797d25705f1945323c465fb","modified":1666530671000},{"_id":"themes/cactus/layout/_partial/post/tag.ejs","hash":"e08fae30da060f49c087f6c121868b08eb55c795","modified":1666530671000},{"_id":"themes/cactus/layout/_partial/post/share.ejs","hash":"1a294382bd14d979525b8ed934d807bc7d083e4d","modified":1666530671000},{"_id":"themes/cactus/source/css/_colors/classic.styl","hash":"bc09f8777a6c99030da953dfdb84f793c5e4fd85","modified":1666530671000},{"_id":"themes/cactus/source/css/_colors/dark.styl","hash":"9aa43b1f23d5d268dfa36bd942d6ce97b7677c4d","modified":1666530671000},{"_id":"themes/cactus/source/css/_colors/light.styl","hash":"d14ef1aa02d0895b6f9321ebfc23a1ec84b054b8","modified":1666530671000},{"_id":"themes/cactus/source/css/_colors/white.styl","hash":"88e93a9d3fe1d0270d65cabdeacc18bd94d45937","modified":1666530671000},{"_id":"themes/cactus/source/css/_highlight/androidstudio.styl","hash":"2af0861725f97f0ee2ded67c3d2d4548c62b2d16","modified":1666530671000},{"_id":"themes/cactus/source/css/_highlight/arta.styl","hash":"b3e81e3e694ceb8deed178adb8b91013c5120e30","modified":1666530671000},{"_id":"themes/cactus/source/css/_highlight/agate.styl","hash":"53027913ed8d4f75ac3e49e76aad824f0df62da3","modified":1666530671000},{"_id":"themes/cactus/source/css/_highlight/atelier-cave-dark.styl","hash":"ce63dd8548688d88254405eedfa75b1d7c82449e","modified":1666530671000},{"_id":"themes/cactus/source/css/_highlight/ascetic.styl","hash":"32cff3bef6fac3760fe78f203096477052a90552","modified":1666530671000},{"_id":"themes/cactus/source/css/_highlight/arduino-light.styl","hash":"15e8572585cd708221c513dea4bdd89d8fe56c10","modified":1666530671000},{"_id":"themes/cactus/source/css/_highlight/atelier-cave-light.styl","hash":"a5be0744a7ecf4a08f600ade4cfd555afc67bc15","modified":1666530671000},{"_id":"themes/cactus/source/css/_highlight/atelier-dune-dark.styl","hash":"c196ff0ee064af0e507823694ae39020addfc280","modified":1666530671000},{"_id":"themes/cactus/source/css/_highlight/atelier-dune-light.styl","hash":"931435fbc6f974e8ce9e32722680035d248a9dc1","modified":1666530671000},{"_id":"themes/cactus/source/css/_highlight/atelier-forest-dark.styl","hash":"effbc5d75fa87203c847039869c22031b40d5b7d","modified":1666530671000},{"_id":"themes/cactus/source/css/_highlight/atelier-estuary-light.styl","hash":"344276ca9b27e51d4c907f76afe5d13cf8e60bdf","modified":1666530671000},{"_id":"themes/cactus/source/css/_highlight/atelier-forest-light.styl","hash":"95228d9f2102fad425536aac44b80b2cba1f5950","modified":1666530671000},{"_id":"themes/cactus/source/css/_highlight/atelier-estuary-dark.styl","hash":"0bb16a4eff93688f40787abc2f9e56e7d5cc93e7","modified":1666530671000},{"_id":"themes/cactus/source/css/_highlight/atelier-heath-dark.styl","hash":"9a2e9a1d0a01bbdf158560c3ed1c134e098b2c68","modified":1666530671000},{"_id":"themes/cactus/source/css/_highlight/atelier-heath-light.styl","hash":"8c8c2e445abef85273be966d59770e9ced6aac21","modified":1666530671000},{"_id":"themes/cactus/source/css/_highlight/atelier-lakeside-light.styl","hash":"2c54cb9bdb259ae3b5b29f63ac2469ed34b08578","modified":1666530671000},{"_id":"themes/cactus/source/css/_highlight/atelier-plateau-dark.styl","hash":"84c80e6f67f62fce958d25817c277d2360272617","modified":1666530671000},{"_id":"themes/cactus/source/css/_highlight/atelier-plateau-light.styl","hash":"d1a05fdd1ededc9063d181ab25bad55a164aeb4a","modified":1666530671000},{"_id":"themes/cactus/source/css/_highlight/atelier-lakeside-dark.styl","hash":"10ee3882fca7b97a37bd309d2d35fce9868647bb","modified":1666530671000},{"_id":"themes/cactus/source/css/_highlight/atelier-savanna-dark.styl","hash":"e32c1c70def8060fce5e790979a126da650ac642","modified":1666530671000},{"_id":"themes/cactus/source/css/_highlight/atelier-savanna-light.styl","hash":"f8244c93711c7cb59dd79d2df966806b30d171ea","modified":1666530671000},{"_id":"themes/cactus/source/css/_highlight/atelier-sulphurpool-dark.styl","hash":"538a14321193cd8abf2ddc484306631e54149ffb","modified":1666530671000},{"_id":"themes/cactus/source/css/_highlight/atelier-sulphurpool-light.styl","hash":"efa52713efc468abeeb2b9299704371583b857de","modified":1666530671000},{"_id":"themes/cactus/source/css/_highlight/atelier-seaside-light.styl","hash":"0597342da6e2d0c5bdcc7d42dabb07322b1a4177","modified":1666530671000},{"_id":"themes/cactus/source/css/_highlight/atelier-seaside-dark.styl","hash":"2edf385215bbe1985b1a10106525d362667d28c2","modified":1666530671000},{"_id":"themes/cactus/source/css/_highlight/codepen-embed.styl","hash":"8b7b34484f76a6c2c3b1a9e49abb9b382f439ae8","modified":1666530671000},{"_id":"themes/cactus/source/css/_highlight/dark.styl","hash":"f5e6e75958de59e87fc6be3a1668e870e20bc836","modified":1666530671000},{"_id":"themes/cactus/source/css/_highlight/darkula.styl","hash":"9717efa9194837ba3fb4d762997d33075dcf8bfa","modified":1666530671000},{"_id":"themes/cactus/source/css/_highlight/color-brewer.styl","hash":"2a439d6214430e2f45dd4939b4dfe1fe1a20aa0f","modified":1666530671000},{"_id":"themes/cactus/source/css/_highlight/brown-paper.styl","hash":"c2326ba20a5020a66ca7895258d18833327d4334","modified":1666530671000},{"_id":"themes/cactus/source/css/_highlight/far.styl","hash":"aaac3028f5e33123cd123a583cddc9290c45ec8e","modified":1666530671000},{"_id":"themes/cactus/source/css/_highlight/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1666530671000},{"_id":"themes/cactus/source/css/_highlight/foundation.styl","hash":"bf8ddc94b4ad995b8b8805b5a4cf95004553fdac","modified":1666530671000},{"_id":"themes/cactus/source/css/_highlight/github-gist.styl","hash":"48211a03d33e7f7ada0b261162bea06676155a71","modified":1666530671000},{"_id":"themes/cactus/source/css/_highlight/github.styl","hash":"3336aeba324c6d34a6fd41fef9b47bc598f7064c","modified":1666530671000},{"_id":"themes/cactus/source/css/_highlight/docco.styl","hash":"b1c176378bb275f2e8caa759f36294e42d614bf1","modified":1666530671000},{"_id":"themes/cactus/source/css/_highlight/googlecode.styl","hash":"bda816beee7b439814b514e6869dc678822be1bc","modified":1666530671000},{"_id":"themes/cactus/source/css/_highlight/gruvbox-dark.styl","hash":"76b744c14fd5600bea64731c05df97c2df75523f","modified":1666530671000},{"_id":"themes/cactus/source/css/_highlight/grayscale.styl","hash":"bf37d8b8d1e602126c51526f0cc28807440228ed","modified":1666530671000},{"_id":"themes/cactus/source/css/_highlight/highlightjs.styl","hash":"0e198b7a59191c7a39b641a4ddd22c948edb9358","modified":1666530671000},{"_id":"themes/cactus/source/css/_highlight/hopscotch.styl","hash":"1378a6bc67a32c0cbff72ab771268b53f9aa586d","modified":1666530671000},{"_id":"themes/cactus/source/css/_highlight/ir-black.styl","hash":"53e5d74326a4527b92272bbd6946d4fec92720e8","modified":1666530671000},{"_id":"themes/cactus/source/css/_highlight/hybrid.styl","hash":"b8eb5c69d12f2ee5ebc50265ae271699d7f1a8d3","modified":1666530671000},{"_id":"themes/cactus/source/css/_highlight/index.styl","hash":"002d5596f6379cc87dbd43d9145bc764aa666be1","modified":1666530671000},{"_id":"themes/cactus/source/css/_highlight/idea.styl","hash":"a02967cb51c16a34e0ee895d33ded2b823d35b21","modified":1666530671000},{"_id":"themes/cactus/source/css/_highlight/kimbie.dark.styl","hash":"45dbb168f22d739d0109745d2decd66b5f94e786","modified":1666530671000},{"_id":"themes/cactus/source/css/_highlight/kimbie.styl","hash":"51b889ca7c6fe178cfbbe28d875a6ea427184441","modified":1666530671000},{"_id":"themes/cactus/source/css/_highlight/kimbie.light.styl","hash":"61f8baed25be05288c8604d5070afbcd9f183f49","modified":1666530671000},{"_id":"themes/cactus/source/css/_highlight/mono-blue.styl","hash":"4c89a6ae29de67c0700585af82a60607e85df928","modified":1666530671000},{"_id":"themes/cactus/source/css/_highlight/monokai-sublime.styl","hash":"c385b11345894be7e6ce3c5f08663e199933b8e4","modified":1666530671000},{"_id":"themes/cactus/source/css/_highlight/monokai.styl","hash":"f87be027848ea6bee623a08ad1e17b2f5b7937ee","modified":1666530671000},{"_id":"themes/cactus/source/css/_highlight/magula.styl","hash":"16d323f989b1420a0f72ef989242ece9bf17a456","modified":1666530671000},{"_id":"themes/cactus/source/css/_highlight/obsidian.styl","hash":"199e28326be8590883f0813ebbd54fcfaa4750fd","modified":1666530671000},{"_id":"themes/cactus/source/css/_highlight/paraiso-light.styl","hash":"d224d1df0eb3395d9eea1344cee945c228af2911","modified":1666530671000},{"_id":"themes/cactus/source/css/_highlight/pojoaque.styl","hash":"4e7b6b046b8575ac749f6aec4e953a62ada27a36","modified":1666530671000},{"_id":"themes/cactus/source/css/_highlight/paraiso-dark.styl","hash":"f1537bd868579fa018ecdbfd2eb922dcf3ba2cac","modified":1666530671000},{"_id":"themes/cactus/source/css/_highlight/paraiso.styl","hash":"75f181eece6b71d033ea0c8d6cf00ae7efb9e29b","modified":1666530671000},{"_id":"themes/cactus/source/css/_highlight/railscasts.styl","hash":"b6674db9210e0c4444e4835fff2d1361f3ebd64c","modified":1666530671000},{"_id":"themes/cactus/source/css/_highlight/pojoaque.jpg","hash":"c5fe6533b88b21f8d90d3d03954c6b29baa67791","modified":1666530671000},{"_id":"themes/cactus/source/css/_highlight/rainbow.styl","hash":"c0cf97aae3e10fdcd10414547a711c9effbc39b8","modified":1666530671000},{"_id":"themes/cactus/source/css/_highlight/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1666530671000},{"_id":"themes/cactus/source/css/_highlight/solarized-dark.styl","hash":"90c9da5aa594383697e5b18892a7f95beb053f55","modified":1666530671000},{"_id":"themes/cactus/source/css/_highlight/school-book.styl","hash":"d43560fe519a931ce6da7d57416d7aa148441b83","modified":1666530671000},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night-bright.styl","hash":"7674fecb6d27350727dc0d2dc93bc018382ebbd0","modified":1666530671000},{"_id":"themes/cactus/source/css/_highlight/sunburst.styl","hash":"af3eec0fd56151e55bbd49c31b151f36717611d8","modified":1666530671000},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night-blue.styl","hash":"f24c17d0ab815dcfaab3438cb9fe2ab4839f5e0d","modified":1666530671000},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night.styl","hash":"16ba09b2db501e4e3e2e7d62595d9bf935bf27c4","modified":1666530671000},{"_id":"themes/cactus/source/css/_highlight/solarized-light.styl","hash":"aa0dd3fd25c464183b59c5575c9bee8756b397f2","modified":1666530671000},{"_id":"themes/cactus/source/css/_highlight/tomorrow.styl","hash":"15779cf6846725c7c35fc56cac39047d7e0aec1c","modified":1666530671000},{"_id":"themes/cactus/source/css/_partial/archive.styl","hash":"31aef892437d5734a134c34f2a8a6610a8f671c3","modified":1666530671000},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night-eighties.styl","hash":"28d751075ebabf7d0327a36f725076fe82fdf626","modified":1666530671000},{"_id":"themes/cactus/source/css/_highlight/vs.styl","hash":"959a746f4b37aacb5d1d6ff1d57e0c045289d75d","modified":1666530671000},{"_id":"themes/cactus/source/css/_highlight/xcode.styl","hash":"5e8532ae8366dcf6a4ef5e4813dc3d42ab3d0a50","modified":1666530671000},{"_id":"themes/cactus/source/css/_partial/comments.styl","hash":"1e90f1fb9d4c155df518cacb5a537e9de9c042c1","modified":1666530671000},{"_id":"themes/cactus/source/css/_partial/article.styl","hash":"258370d8ab98e63804ead9bc030f633ca97a1235","modified":1666530671000},{"_id":"themes/cactus/source/css/_partial/categories.styl","hash":"a43f00e61b3507f130b8a3f8108a4eeca147c2a0","modified":1666530671000},{"_id":"themes/cactus/source/css/_highlight/zenburn.styl","hash":"68ff9332ccc03f9389b15b713415cde016f8088f","modified":1666530671000},{"_id":"themes/cactus/source/css/_partial/index.styl","hash":"59c99f4ea3a73bf47ce030df166c5e33d5de31fb","modified":1666530671000},{"_id":"themes/cactus/source/css/_partial/header.styl","hash":"7f18929e7f4ad6d20da374e8b9f85ce587220a87","modified":1666530671000},{"_id":"themes/cactus/source/css/_partial/pagination.styl","hash":"950bf517bbe7adb9a9aa4eb5ddec74ffc7598787","modified":1666530671000},{"_id":"themes/cactus/source/css/_partial/footer.styl","hash":"61c2c7c5f73a0022ec41830bea0812a97f522d7c","modified":1666530671000},{"_id":"themes/cactus/source/css/_partial/tags.styl","hash":"d571d5c7c960300d29c5f0ec3fe1140322ecd6b3","modified":1666530671000},{"_id":"themes/cactus/source/lib/clipboard/clipboard.min.js","hash":"6674f81dd01c76be986cf0a8172d1073e56d7ef4","modified":1666530671000},{"_id":"themes/cactus/source/css/_partial/search.styl","hash":"159be002780c62a77f46947cf854a7342fba24f4","modified":1666530671000},{"_id":"themes/cactus/source/css/_partial/tooltip.styl","hash":"2daff581ec3efaec840cbfdee512195919c32629","modified":1666530671000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff2","hash":"7ea4fd7dd4cd4f480af78a0e2c5849eb921b1aeb","modified":1666530671000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff","hash":"f6fda2de0348b3e3b7de73267f9f8e97a62f8353","modified":1666530671000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff","hash":"56e632c9196fac364c66f812a3b4635dd999ad1c","modified":1666530671000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff2","hash":"6e40d0c7669c1adbcbf034bdc459f7bed4d6676d","modified":1666530671000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff2","hash":"50b654d916204c30987d1987abd890ef92085ae3","modified":1666530671000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff","hash":"1c3dbf17411b1f6a6b22c2b76e9d8511586643d0","modified":1666530671000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff","hash":"43a8aaa3fca8721dd32a5d20f7a98dfbc87c97fd","modified":1666530671000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff2","hash":"14b3e257c51a6a11d23b2a078017ff340c9777e4","modified":1666530671000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Regular.woff","hash":"235889d59ddad2b1f3243ccaab7733bd713a2a21","modified":1666530671000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Regular.woff2","hash":"a9714ffb842afc74836e64de04b52d8c37c87c8a","modified":1666530671000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff","hash":"c0e784de2eb5261cca244928f8a81fd893c3fe16","modified":1666530671000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Variable.woff","hash":"2e8e6d38d361def5f48baac366f04e3db3ed4828","modified":1666530671000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff2","hash":"9b03b1a9071709f5b7dbca13412ecef6cb7a2a67","modified":1666530671000},{"_id":"themes/cactus/source/lib/vazir-font/font-face.css","hash":"ba0030e1cd28a8caa7a5bb74b98da7c7bb185c90","modified":1666530671000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Variable.woff2","hash":"e213bb26bc7f10e1df3fe2d03d3ecaecd6e6d371","modified":1666530671000},{"_id":"themes/cactus/source/css/_partial/post/actions_desktop.styl","hash":"a1f36f9a3fd5ffcd832bf39e9402678978035d48","modified":1666530671000},{"_id":"themes/cactus/source/css/_partial/post/actions_mobile.styl","hash":"0d2966c1d870392476864af8ee3ba312ba30cb82","modified":1666530671000},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"be22b700cc80c242da898ef8b7bb96adc4e0899f","modified":1666530671000},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-v4compatibility.ttf","hash":"c77fcea87e0c4953f2b0ac92dc49a31c664b6ef7","modified":1666530671000},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-v4compatibility.woff2","hash":"60d794c18c2b58b2b76d2ce17b85c44c48fb2efd","modified":1666530671000},{"_id":"themes/cactus/source/lib/justified-gallery/js/jquery.justifiedGallery.min.js","hash":"ad8f48b4022498078b089fcdd1e8b47faf496931","modified":1666530671000},{"_id":"themes/cactus/source/lib/justified-gallery/css/justifiedGallery.min.css","hash":"dd3052149d3054f35efb823c68dd78e78aad5875","modified":1666530671000},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.ttf","hash":"d1a7eff18db8a47207ea42e34e9d9fbcc66a97a7","modified":1666530671000},{"_id":"themes/cactus/source/lib/jquery/jquery.min.js","hash":"b82d238d4e31fdf618bae8ac11a6c812c03dd0d4","modified":1666530671000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.eot","hash":"91152bd73e7ff8d943e3bde3ddb0fa0a018e1c21","modified":1666530671000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.ttf","hash":"b65915e3fa57b5c19995d15dc2341d115c1971b9","modified":1666530671000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.eot","hash":"5c1c680fade45393e4a5bb4548a092cd5ea6811e","modified":1666530671000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.ttf","hash":"df82b80c4d3b11e70dcd269fc62ac97cbfa0414d","modified":1666530671000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.ttf","hash":"122bb778b17a152c426a825ee981610a4bd59bf3","modified":1666530671000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.eot","hash":"a059359e9bea17dc2ff2ede955a05bf0dc4d00d0","modified":1666530671000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.eot","hash":"d9ec1f9f3fefd57e446cbe86dc297f1ff269b6de","modified":1666530671000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.ttf","hash":"948a091f0fdb8c7ae17d5ef8e51bd8830d65dd9a","modified":1666530671000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Regular.ttf","hash":"643c28c8f8a2bce1a0d62525aa045cd9883773cd","modified":1666530671000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Regular.eot","hash":"521c01f0eb79a48025e972ecbe21b0d7fb15437b","modified":1666530671000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.ttf","hash":"6aacb0eecb03c660570b6e159ba5ca97ca7461cf","modified":1666530671000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.eot","hash":"a0ea0bdaef00b35544f9a21d25d35db9a79f7189","modified":1666530671000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Variable.ttf","hash":"1e08b6373c2e086f24776df9b11e4be6bbcc8a4a","modified":1666530671000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Variable.eot","hash":"af46f7f4e10a1440a4c97b350622d279143e6798","modified":1666530671000},{"_id":"themes/cactus/source/lib/font-awesome/css/all.min.css","hash":"d3cafed4c6596253c1050ee63897aa0f440e4f65","modified":1666530671000},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"98564e5517b7b455e80b2cd503e7bb3b52beb930","modified":1666530671000},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.ttf","hash":"cfb2c6122bd53141e939ee4ff991a16a29d1bdce","modified":1666530671000},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"09a731f80844483614ff12f86ccbe41db6736cb5","modified":1666530671000},{"_id":"themes/cactus/source/images/logo.png","hash":"0e3029251dfda26adee2761f71377297e8c26871","modified":1666530671000},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-BoldItalic.ttf","hash":"b7d24ab1e4fad720f31a2b0cca1904ce1740d846","modified":1666530671000},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-BoldItalic.ttf","hash":"b542b9591fbf33925d93f0695b6e123a9f0cfd43","modified":1666530671000},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-BoldItalic.ttf","hash":"926035f0156cccf1b0ca507347f39bf9c510f51e","modified":1666530671000},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.ttf","hash":"97f5404656d9547666479ec64c336467000656ef","modified":1666530671000},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Italic.ttf","hash":"9a23c6898b0943bd3d96c04df9a0f66e919451d8","modified":1666530671000},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Italic.ttf","hash":"93ebc5098cf57a32b7b8d297681f31692c09bdfa","modified":1666530671000},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Italic.ttf","hash":"9d757cc9f928fc83b2133283dd639c12b11d94ad","modified":1666530671000},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Bold.ttf","hash":"34f7db59f1d023294e69976aa20b7d52b86165a4","modified":1666530671000},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Regular.ttf","hash":"6c090d6bff3928fbf8a5f4104e58ed7f421aea7c","modified":1666530671000},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Bold.ttf","hash":"58be4b7760e9a84daa81929d046f9a15c4fd1c1a","modified":1666530671000},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Regular.ttf","hash":"20ce1fc7ae1254558ca044ae48283faaa58897e5","modified":1666530671000},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Bold.ttf","hash":"f9918fb93d6ab6850f5d38069a999c311af78816","modified":1666530671000},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Regular.ttf","hash":"de559f8d70d5b1ab2810597bfd0b1b9506f3ef01","modified":1666530671000},{"_id":"themes/fluid/source/css/_pages/_tag/tag.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1663049159000},{"_id":"themes/fluid/.editorconfig","hash":"33218fbd623feb43edf5f99f15965392cecc44a6","modified":1663049159000},{"_id":"themes/fluid/.eslintrc","hash":"4bc2b19ce2b8c4d242f97d4ccf2d741e68ab0097","modified":1663049159000},{"_id":"themes/fluid/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1663049159000},{"_id":"themes/fluid/.gitignore","hash":"ae3bfcb89777657c5dfb5169d91445dcb0e5ab98","modified":1663049159000},{"_id":"themes/fluid/README.md","hash":"6d752df6f2278033dc2512a7d5be22c8a8eb665a","modified":1663049159000},{"_id":"themes/fluid/LICENSE","hash":"26f9356fd6e84b5a88df6d9014378f41b65ba209","modified":1663049159000},{"_id":"themes/fluid/README_en.md","hash":"8c874f309e346fffa392e174385b5cc08510f218","modified":1663049159000},{"_id":"themes/fluid/package.json","hash":"167c6a0729a9286a7f508c1dd6a9c689e8799008","modified":1663049159000},{"_id":"themes/fluid/_config.yml","hash":"34817b2ad823a5e4b30b522eba2f500e5b020de4","modified":1669461880497},{"_id":"themes/fluid/languages/en.yml","hash":"cb11b39f44ea069652c9647179606b6cecc98d50","modified":1663049159000},{"_id":"themes/fluid/languages/de.yml","hash":"0e7d455d9e004ff15d8924b7a0c35cea25ee5b1d","modified":1663049159000},{"_id":"themes/fluid/languages/es.yml","hash":"7112594259c88c04714be152af7fd377687dad40","modified":1663049159000},{"_id":"themes/fluid/languages/eo.yml","hash":"a556251cc50a5680578c03f1efbf252b1f4ab860","modified":1663049159000},{"_id":"themes/fluid/languages/zh-CN.yml","hash":"f96a22f989897ecddc69d5867a206e1cf6b8f610","modified":1663049159000},{"_id":"themes/fluid/languages/ja.yml","hash":"3dd6d20f8d26585a7c154a8e59fe8d5d902f4c6a","modified":1663049159000},{"_id":"themes/fluid/languages/ru.yml","hash":"7dc78f22696649a4c68dc65a9b52d9a992fa82a0","modified":1663049159000},{"_id":"themes/fluid/layout/about.ejs","hash":"163bee643e6a38912d3ae70923c83c48d57222e7","modified":1663049159000},{"_id":"themes/fluid/languages/zh-TW.yml","hash":"596d031dff3826ae8e4ffc8931fff28977b73247","modified":1663049159000},{"_id":"themes/fluid/languages/zh-HK.yml","hash":"80ed400a7adaa92ea54fc7f5d534c9af795bed00","modified":1663049159000},{"_id":"themes/fluid/layout/404.ejs","hash":"9569c5c8f67d2783f372f671c57b93a00dc63c2f","modified":1663049159000},{"_id":"themes/fluid/layout/archive.ejs","hash":"7c1f44005849791feae4abaa10fae4cb983d3277","modified":1663049159000},{"_id":"themes/fluid/layout/category.ejs","hash":"f099161b738a16a32253f42085b5444f902018ed","modified":1663049159000},{"_id":"themes/fluid/layout/categories.ejs","hash":"13859726c27b6c79b5876ec174176d0f9c1ee164","modified":1663049159000},{"_id":"themes/fluid/layout/index.ejs","hash":"db000a6a0cec19d32a6e7e94cd4c478500d9c5ac","modified":1663049159000},{"_id":"themes/fluid/layout/layout.ejs","hash":"7e0023474128fbe4d68c467704c41f1712432415","modified":1663049159000},{"_id":"themes/fluid/layout/links.ejs","hash":"1cac32ec4579aaf7b9fa39d317497331d4c5e1dd","modified":1663049159000},{"_id":"themes/fluid/layout/page.ejs","hash":"ed5007a3feb8f14d3d2843271bfb298eb0c56219","modified":1663049159000},{"_id":"themes/fluid/layout/post.ejs","hash":"505bcc06e55066b7cc5551d9ac0694e7713bfab5","modified":1663049159000},{"_id":"themes/fluid/layout/tag.ejs","hash":"9d686364c4d16a1a9219471623af452035c5b966","modified":1663049159000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/bug_report.md","hash":"554c0d0e086a0784d83ee71c83f8bceeb60aecc8","modified":1663049159000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/bug_report_zh.md","hash":"c8b0d49c49e3c88872fd3b37909345ff5b2b6aa0","modified":1663049159000},{"_id":"themes/fluid/layout/tags.ejs","hash":"1d06af34b6cf1d8a20d2eb565e309326ceba309f","modified":1663049159000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/question.md","hash":"ab5eab9e3ff889c4ba7fd82846e7f5b7ae15bebc","modified":1663049159000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/feature_request_zh.md","hash":"ed08574b196447376dd74411cca664ac9227a5d4","modified":1663049159000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/feature_request.md","hash":"c134dd57ffd269b93402ccfffe7dbe0f0b583bec","modified":1663049159000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/question_zh.md","hash":"fff07ce0472afc368d388637cb9d438195da9b5b","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/archive-list.ejs","hash":"7520fbf91f762207c2ab06b2c293235cd5b23905","modified":1663049159000},{"_id":"themes/fluid/.github/workflows/limit.yaml","hash":"f8bd2edeb4424ee7a055b31583445d5d5dff91a4","modified":1663049159000},{"_id":"themes/fluid/.github/workflows/publish.yaml","hash":"6f02e6440d88629229556e3fd47d0280fe2240db","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/category-chains.ejs","hash":"18309584aab83bc4deb20723ebad832149dd2e24","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/category-list.ejs","hash":"f8d2f1907450e61968e6d54443e9be8138196a77","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/comments.ejs","hash":"24ef242aa01e5f5bc397cf3f83ae48b1e8353dab","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/css.ejs","hash":"85f6e051550907681ab4ed2e268ac8f6e9ebf931","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/footer.ejs","hash":"10ccfb8eef4e16182183c9a3e175c90d5b6397d3","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/head.ejs","hash":"7b7b1d098726e86687a15fe3d520d178577ffcae","modified":1663049159000},{"_id":"themes/fluid/scripts/filters/default-injects.js","hash":"b2013ae8e189cd07ebc8a2ff48a78e153345210f","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/markdown-plugins.ejs","hash":"fc4bdf7de0cf1a66d0e5e4fba1b31d6f7ed49468","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/paginator.ejs","hash":"0f38a2c238169edcb63fc46c23bfc529ff3859b7","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/header.ejs","hash":"0d5e397d30051e5fbabe7b47cfd1f1e6a5820af1","modified":1663049159000},{"_id":"themes/fluid/scripts/filters/locals.js","hash":"58d0fec976f6b1d35e7ea03edc45414088acf05c","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/scripts.ejs","hash":"da5810785105e5075861593c7ac22c7aa9665a72","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/search.ejs","hash":"70e1c929e084ca8a2648cedabf29b372511ea2b8","modified":1663049159000},{"_id":"themes/fluid/scripts/events/index.js","hash":"79de5a379b28cad759a49048351c7f6b8915bd7d","modified":1663049159000},{"_id":"themes/fluid/scripts/filters/post-filter.js","hash":"d516b9db63067f9ea9c72cc75ae4ff358417e77d","modified":1663049159000},{"_id":"themes/fluid/scripts/generators/local-search.js","hash":"fc2c50405b771b06b7f6cfc4e9de97b992691555","modified":1663049159000},{"_id":"themes/fluid/scripts/helpers/date.js","hash":"9bda6382f61b40a20c24af466fe10c8366ebb74c","modified":1663049159000},{"_id":"themes/fluid/scripts/generators/pages.js","hash":"d9971f15fbb6b775e3d31a1b9b45011959395010","modified":1663049159000},{"_id":"themes/fluid/scripts/helpers/import.js","hash":"ca53e8dbf7d44cfd372cfa79ac60f35a7d5b0076","modified":1663049159000},{"_id":"themes/fluid/scripts/helpers/engine.js","hash":"d3a231d106795ce99cb0bc77eb65f9ae44515933","modified":1663049159000},{"_id":"themes/fluid/scripts/helpers/export-config.js","hash":"47e6dba7652a621a54067413490a11c8a89e3d7b","modified":1663049159000},{"_id":"themes/fluid/scripts/helpers/injects.js","hash":"1ad2ae6b11bd8806ee7dd6eb7140d8b54a95d613","modified":1663049159000},{"_id":"themes/fluid/scripts/helpers/page.js","hash":"4607607445233b3029ef20ed5e91de0da0a7f9c5","modified":1663049159000},{"_id":"themes/fluid/scripts/tags/button.js","hash":"3eb43a8cdea0a64576ad6b31b4df6c2bf5698d4c","modified":1663049159000},{"_id":"themes/fluid/scripts/helpers/scope.js","hash":"d41d9d658fcb54964b388598e996747aadb85b0f","modified":1663049159000},{"_id":"themes/fluid/scripts/helpers/url.js","hash":"2a6a8288176d0e0f6ec008056bf2745a86e8943e","modified":1663049159000},{"_id":"themes/fluid/scripts/helpers/utils.js","hash":"226f99b465ff513de075a8e78b321d6cb62592ca","modified":1663049159000},{"_id":"themes/fluid/scripts/helpers/wordcount.js","hash":"4543b8954c5c2ca91191cc0d53cf071b3f26faaa","modified":1663049159000},{"_id":"themes/fluid/scripts/tags/checkbox.js","hash":"4938610c3543a921a341bc074626d511cb1a4b45","modified":1663049159000},{"_id":"themes/fluid/scripts/tags/group-image.js","hash":"4aeebb797026f1df25646a5d69f7fde79b1bcd26","modified":1663049159000},{"_id":"themes/fluid/scripts/utils/compare-versions.js","hash":"dbbc928c914fc2bd242cd66aa0c45971aec13a5d","modified":1663049159000},{"_id":"themes/fluid/scripts/tags/label.js","hash":"f05a6d32cca79535b22907dc03edb9d3fa2d8176","modified":1663049159000},{"_id":"themes/fluid/scripts/tags/note.js","hash":"f52f3a005b41f48b4da274ac64710177c8d4502f","modified":1663049159000},{"_id":"themes/fluid/scripts/tags/mermaid.js","hash":"75160561e1ef3603b6d2ad2938464ab1cb77fd38","modified":1663049159000},{"_id":"themes/fluid/scripts/utils/object.js","hash":"33b57e4decdc5e75c518859f168c8ba80b2c665b","modified":1663049159000},{"_id":"themes/fluid/scripts/utils/resolve.js","hash":"8c4a8b62aa8608f12f1e9046231dff04859dc3e9","modified":1663049159000},{"_id":"themes/fluid/scripts/utils/url-join.js","hash":"718aab5e7b2059a06b093ca738de420d9afa44ba","modified":1663049159000},{"_id":"themes/fluid/source/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1663049159000},{"_id":"themes/fluid/source/css/highlight-dark.styl","hash":"45695ef75c31a4aa57324dd408b7e2327a337018","modified":1663049159000},{"_id":"themes/fluid/source/css/highlight.styl","hash":"a9efc52a646a9e585439c768557e3e3c9e3326dc","modified":1663049159000},{"_id":"themes/fluid/source/css/main.styl","hash":"855ae5fe229c51afa57f7645f6997a27a705d7e4","modified":1663049159000},{"_id":"themes/fluid/source/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1663049159000},{"_id":"themes/fluid/source/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1663049159000},{"_id":"themes/fluid/source/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1663049159000},{"_id":"themes/fluid/source/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1663049159000},{"_id":"themes/fluid/source/js/color-schema.js","hash":"ba63f7c3324bc1fdd050a90add9d8faaffc27e07","modified":1663049159000},{"_id":"themes/fluid/source/js/boot.js","hash":"38bd26c6b7acdafda86dda3560e6a3ca488d3c76","modified":1663049159000},{"_id":"themes/fluid/source/js/events.js","hash":"89e3561488a618ed0caeb9edf18e441978e29c25","modified":1663049159000},{"_id":"themes/fluid/source/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1663049159000},{"_id":"themes/fluid/source/js/leancloud.js","hash":"eff77c7a5c399fcaefda48884980571e15243fc9","modified":1663049159000},{"_id":"themes/fluid/source/js/local-search.js","hash":"cebcda5991b6a9ab9307c69542389ce9013f04f7","modified":1663049159000},{"_id":"themes/fluid/source/js/plugins.js","hash":"2333494add51e5e1374602a4e81f0be36a05d4c2","modified":1663049159000},{"_id":"themes/fluid/source/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/comments/changyan.ejs","hash":"c9b2d68ed3d375f1953e7007307d2a3f75ed6249","modified":1663049159000},{"_id":"themes/fluid/source/js/utils.js","hash":"45cc86f099db0a2c36ad49711ce66c2d598a2ab1","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/comments/giscus.ejs","hash":"95f8b866b158eff9352c381c243b332a155a5110","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/comments/cusdis.ejs","hash":"5f9dc012be27040bbe874d0c093c0d53958cc987","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/comments/disqus.ejs","hash":"aab4a4d24c55231a37db308ae94414319cecdd9b","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/comments/gitalk.ejs","hash":"843bc141a4545eb20d1c92fb63c85d459b4271ec","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/comments/livere.ejs","hash":"2264758fed57542a7389c7aa9f00f1aefa17eb87","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/comments/remark42.ejs","hash":"d4e9532feeb02aed61bd15eda536b5b631454dac","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/comments/twikoo.ejs","hash":"e6820fb7f13662c42f8433ec95404238f4c1860c","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/comments/utterances.ejs","hash":"c7ccf7f28308334a6da6f5425b141a24b5eca0e2","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/comments/valine.ejs","hash":"19ba937553dddd317f827d682661a1066a7b1f30","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/comments/waline.ejs","hash":"12727da7cf3ac83443270f550be4d1c06135b52b","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/header/banner.ejs","hash":"e07757b59e7b89eea213d0e595cb5932f812fd32","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/footer/statistics.ejs","hash":"454d8dd4c39f9494ebeb03ca0746f5bc122af76a","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/footer/beian.ejs","hash":"4fb9b5dd3f3e41a586d6af44e5069afe7c81fff2","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/plugins/anchorjs.ejs","hash":"40181442d3a2b8734783a0ad7caf2d2522e3f2ab","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/header/navigation.ejs","hash":"38990ed9dbccd88342ee4b4cb5e60818e9eb8e8a","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/plugins/analytics.ejs","hash":"1327395a4dde1ea06c476b047fb110bcd269149f","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/plugins/code-widget.ejs","hash":"3a505cba37942badf62a56bbb8b605b72af330aa","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/plugins/encrypt.ejs","hash":"e3713fa78e0fc14a239360b020068d8513573ae4","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/plugins/highlight.ejs","hash":"7529dd215b09d3557804333942377b9e20fa554e","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/plugins/fancybox.ejs","hash":"9d1ea2a46b8c8ad8c168594d578f40764818ef13","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/plugins/mermaid.ejs","hash":"e49506e9895e255e0e53f34a11d325f83109c1b0","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/plugins/math.ejs","hash":"dcbf9a381ee76f2f1f75fcbc22c50a502ec85023","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/plugins/nprogress.ejs","hash":"4c2d39ce816b8a6dcd6b53113c8695f8bd650a23","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/post/category-bar.ejs","hash":"8772bce97ed297e7a88523f4e939ed6436c22f87","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/plugins/typed.ejs","hash":"51faef29f8e464bcb2e73049b428b88c8dd8b40a","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/post/meta-bottom.ejs","hash":"7079b27a7bc15a7dfa9209f6be6051bdec49ebad","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/post/copyright.ejs","hash":"9d13392cea94b66d86422ad17c66e5ae67ce1d32","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/post/meta-top.ejs","hash":"ce6e9f578f4faa45840abddf8f46af3f4b69c177","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/post/sidebar-right.ejs","hash":"d5fcc9b60e02f869a29a8c17a16a6028ecc1e6d8","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/post/sidebar-left.ejs","hash":"9992c99b3eb728ad195970e1b84d665f2c8691c4","modified":1663049159000},{"_id":"themes/fluid/scripts/events/lib/compatible-configs.js","hash":"ef474d1fa5bbafc52619ced0f9dc7eaf2affb363","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/post/toc.ejs","hash":"97e003371b76911522fb93c5180c9fdceed29488","modified":1663049159000},{"_id":"themes/fluid/scripts/events/lib/footnote.js","hash":"2ec2ae03c79bb1ae7ac3fcf7e00fb52d1af2898d","modified":1663049159000},{"_id":"themes/fluid/scripts/events/lib/highlight.js","hash":"0f02df2244e275595e72163498d42f42bcf0de5e","modified":1663049159000},{"_id":"themes/fluid/scripts/events/lib/hello.js","hash":"44c5eb97b98813a07c659d6afedd17fad63b1821","modified":1663049159000},{"_id":"themes/fluid/scripts/events/lib/lazyload.js","hash":"9ba0d4bc224e22af8a5a48d6ff13e5a0fcfee2a4","modified":1663049159000},{"_id":"themes/fluid/scripts/events/lib/injects.js","hash":"5ae4b07204683e54b5a1b74e931702bbce2ac23e","modified":1663049159000},{"_id":"themes/fluid/scripts/events/lib/merge-configs.js","hash":"7c944c43b2ece5dd84859bd9d1fe955d13427387","modified":1663049159000},{"_id":"themes/fluid/source/css/_functions/base.styl","hash":"2e46f3f4e2c9fe34c1ff1c598738fc7349ae8188","modified":1663049159000},{"_id":"themes/fluid/source/css/_mixins/base.styl","hash":"542e306ee9494e8a78e44d6d7d409605d94caeb3","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/pages.styl","hash":"b8e887bc7fb3b765a1f8ec9448eff8603a41984f","modified":1663049159000},{"_id":"themes/fluid/source/css/_variables/base.styl","hash":"4ed5f0ae105ef4c7dd92eaf652ceda176c38e502","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_archive/archive.styl","hash":"c475e6681546d30350eaed11f23081ecae80c375","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_about/about.styl","hash":"97fe42516ea531fdad771489b68aa8b2a7f6ae46","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/base.styl","hash":"643284c567665f96915f0b64e59934dda315f74d","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/color-schema.styl","hash":"61279540c2623ea4bf93e40613d41380839b92d3","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/inline.styl","hash":"411a3fa3f924a87e00ff04d18b5c83283b049a4d","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/keyframes.styl","hash":"94065ea50f5bef7566d184f2422f6ac20866ba22","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_category/category-chain.styl","hash":"0cdf7ef50dfd0669d3b257821384ff31cd81b7c9","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_category/category-bar.styl","hash":"cc6df43fef6bb3efecbfdd8b9e467424a1dea581","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_category/category-list.styl","hash":"7edfe1b571ecca7d08f5f4dbcf76f4ffdcfbf0b5","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_index/index.styl","hash":"0acbd71633bcc7191672ea4e1b2277bea350d73b","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_links/links.styl","hash":"5c7f2044e3f1da05a3229537c06bd879836f8d6e","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_post/comment.styl","hash":"780f3788e7357bcd3f3262d781cb91bb53976a93","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_post/highlight.styl","hash":"4df764d298fe556e501db4afc2b05686fe6ebcfb","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_post/markdown.styl","hash":"1e3d3a82721e7c10bcfcecec6d81cf2979039452","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_post/post-tag.styl","hash":"27f70062415ccf66a9b6f4952db124fc1471fda5","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_post/post-page.styl","hash":"127bb5391370afe7fef2a297084d76406bc5e902","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_tag/tags.styl","hash":"65bfc01c76abc927fa1a23bf2422892b0d566c3f","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/board.styl","hash":"4397037fc3f0033dbe546c33cd9dbdabd8cb1632","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/anchorjs.styl","hash":"e0cebda4a6f499aff75e71417d88caa7ceb13b94","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/banner.styl","hash":"7a0bd629bc234fc75e3cc8e3715ffada92f09e73","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/code-widget.styl","hash":"b66ab013f0f37d724a149b85b3c7432afcf460ad","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footer.styl","hash":"2caaca71dd1ff63d583099ed817677dd267b457e","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/copyright.styl","hash":"26f71a9cd60d96bb0cb5bbdf58150b8e524d9707","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footnote.styl","hash":"ae9289cc89649af2042907f8a003303b987f3404","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/modal.styl","hash":"adf6c1e5c8e1fb41c77ce6e2258001df61245aa2","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/header.styl","hash":"0aa512c21a4b74ef2e70009786a1858d7c2fae9c","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/ngrogress.styl","hash":"5d225357b4a58d46118e6616377168336ed44cb2","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/noscript.styl","hash":"0cf2f2bb44f456150d428016675d5876a9d2e2aa","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/qrcode.styl","hash":"78704a94c0436097abfb0e0a57abeb3429c749b7","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/pagination.styl","hash":"8bb1b68e5f3552cb48c2ffa31edbc53646a8fb4c","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/scroll-btn.styl","hash":"f0e429a27fa8a7658fcbddbb4d4dbe4afa12499a","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/search.styl","hash":"10f7e91a91e681fb9fe46f9df7707b9ef78707c8","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/toc.styl","hash":"9e7452aa2372153f25d7a4675c9d36d281a65d24","modified":1663049159000},{"_id":"themes/fluid/source/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1663049159000},{"_id":"source/about/index.md","hash":"e56c642f4e40a8909c9031cfc65dae6a8ffa6635","modified":1666797287100},{"_id":"themes/fluid/source/img/touxiang.png","hash":"4d0625bb6282c4068d51c618be74276c48bc885d","modified":1666803218535},{"_id":"themes/fluid/source/img/backend.png","hash":"f5b4ccc1e38053a7c74536e13bf0d34eeaa3b97a","modified":1666804123439},{"_id":"public/local-search.xml","hash":"64f14c0379bdbf35c3f9d5fd4b2c01bca8bed5ae","modified":1669457830695},{"_id":"public/about/index.html","hash":"c832220dabe6c1d329bf75a3b159c4a1c7ac5147","modified":1669457830695},{"_id":"public/archives/index.html","hash":"8bfb5a341d2df92e880d051a5ee064e7beaed29c","modified":1669457830695},{"_id":"public/archives/2022/index.html","hash":"2312e0ae921453d8f2a5f833cc53333b246077ba","modified":1669457830695},{"_id":"public/archives/2022/10/index.html","hash":"25d24df785196d1f2cab3a58735cc4548c76215c","modified":1669457830695},{"_id":"public/index.html","hash":"04becc3b809887f61cc66ed7dec1831f1c0a86ae","modified":1669457830695},{"_id":"public/404.html","hash":"6cbd2763672ea5d0877312c51f32d9f0455b7ff6","modified":1669457830695},{"_id":"public/tags/index.html","hash":"2999d53c5561c7277f3fb39a8c74674e2244f394","modified":1669457830695},{"_id":"public/categories/index.html","hash":"524266c367f27adc7ba625563c56044e4710292f","modified":1669457830695},{"_id":"public/links/index.html","hash":"dd96d4695204f49d0dabe698ee02a0234e3e2616","modified":1669457830695},{"_id":"public/2022/10/26/hello-world/index.html","hash":"1ad928301fe4718156ad1d1ffd8d7b189c6df845","modified":1669457830695},{"_id":"public/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1669457830695},{"_id":"public/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1669457830695},{"_id":"public/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1669457830695},{"_id":"public/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1669457830695},{"_id":"public/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1669457830695},{"_id":"public/css/highlight-dark.css","hash":"2b0daa6e5343da9dbb26d617d224b8397e48556b","modified":1669457830695},{"_id":"public/css/highlight.css","hash":"0f9a477d33d3b15ebe7e163e756fb7c54c7ded6b","modified":1669457830695},{"_id":"public/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1669457830695},{"_id":"public/js/boot.js","hash":"38bd26c6b7acdafda86dda3560e6a3ca488d3c76","modified":1669457830695},{"_id":"public/js/leancloud.js","hash":"eff77c7a5c399fcaefda48884980571e15243fc9","modified":1669457830695},{"_id":"public/js/events.js","hash":"89e3561488a618ed0caeb9edf18e441978e29c25","modified":1669457830695},{"_id":"public/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1669457830695},{"_id":"public/js/color-schema.js","hash":"ba63f7c3324bc1fdd050a90add9d8faaffc27e07","modified":1669457830695},{"_id":"public/js/local-search.js","hash":"cebcda5991b6a9ab9307c69542389ce9013f04f7","modified":1669457830695},{"_id":"public/js/utils.js","hash":"45cc86f099db0a2c36ad49711ce66c2d598a2ab1","modified":1669457830695},{"_id":"public/js/plugins.js","hash":"2333494add51e5e1374602a4e81f0be36a05d4c2","modified":1669457830695},{"_id":"public/css/main.css","hash":"d3b6eb3ef0e222271f1453d3d1214f3ba053792d","modified":1669457830695},{"_id":"public/img/touxiang.png","hash":"4d0625bb6282c4068d51c618be74276c48bc885d","modified":1669457830695},{"_id":"public/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1669457830695},{"_id":"public/img/backend.png","hash":"f5b4ccc1e38053a7c74536e13bf0d34eeaa3b97a","modified":1669457830695},{"_id":"source/_posts/hello-git.md","hash":"65d9607fccba36946259427230c86a25fbf45d82","modified":1666850174257},{"_id":"public/2022/10/27/hello-git/index.html","hash":"a9b2cd0b48650dfbf4ec2ed4c9f48277009f6bc2","modified":1669457830695},{"_id":"source/_posts/WebSockect 实现聊天室.md","hash":"975f55a8f4ed5ffeb78290ddec01ac8884997298","modified":1669461010852},{"_id":"public/archives/2022/11/index.html","hash":"618dfeafdfc039627e1b46d9f2b7ecbc56ac09a5","modified":1669457830695},{"_id":"public/2022/11/26/WebSockect 实现聊天室/index.html","hash":"8c8d1962478ff83c15c96ec504dc5baa55481c30","modified":1669457830695},{"_id":"themes/fluid/source/img/wechatQR.png","hash":"cb75bd131daa32307c9929acfeb9ec1344afe21e","modified":1669461640770},{"_id":"source/_posts/WebSocket 实现聊天室.md","hash":"2aa45b6b8f56c32ab7dea54af919296137d9179c","modified":1669462666747}],"Category":[],"Data":[],"Page":[{"title":"Hello Hexo","layout":"about","date":"2022-10-26T15:12:48.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: Hello Hexo\nlayout: about\ndate: 2022-10-26 23:12:48\n---\n","updated":"2022-11-26T11:49:46.174Z","path":"about/index.html","_id":"cl9ps2hzp0000vktnfdzy1anf","comments":1,"content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Hello Git","_content":"\nGit 入门笔记，带你快速使用 Git Bash 命令\n\n# Git 入门\n\ngit 分布式版本控制\n\n记录版本号 ，每个版本都有（高效的压缩解压算法）\n\n## 本地库\n\n本地结构\n\n    1. 本地库\n    1. 暂存区\n    1. 工作区\n\n#### git init\n\n初始化本地库\n\n#### git add **git commit**\n\n工作区 -》**git add** 【】暂存区 -》**git commit** 【】 本地库\n\n工作区 下（.git 同级）未 git add\n\n缓存区 已经 git add 未 git commit\n\n#### git status\n\n查看工作状态\n\n#### git log\n\n提交日志（由近到远）\n\n每一条内容 有一个 key 索引唯一对应\n\n不同展示样式：\n\n##### git log --pretty=oneline\n\n##### git log --oneline\n\n##### git reflog\n\n#### git reset --【】索引\n\n1.使用 hard（使用最多）\n\n​ 本地库的指针移动的同时 同步工作区、暂存区、本地库\n\n2.使用 mixed\n\n​ 本地库的指针移动的同时 同步赞存区、本地库\n\n2.使用 soft\n\n​ 只会让本地移动\n\n#### git diff\n\n比较工作区和暂存区的差异 （带文件比文件 ，不带比所有）\n\n### 分支\n\n新建分支会先将主分支的最新版本然后加到分支\n\n_各自分支相互独立_\n\n#### git branch\n\n##### git branch -v\n\n​ 查看当前所有分支\n\n##### git branch 【】\n\n创建分支\n\n##### git checkout 【】\n\n切换分支\n\n主分支合并 其他分支\n\n1. 切换到主分支\n2. 使用 git merge 【分支】（当主分支和其他分支 都修改了同一文件的同一位置就会冲突）\n3. 解决冲突方法：直接文件选择性删除 （再添加 提交）\n\n## 远程库\n\n**github**\n\n**gitee**\n\n**gitlab**\n\n#### git remote add 【name】【https://.....】\n\n本地库起远程库别名\n\n#### git remote -v\n\n查看别名\n\n**git push 【name】【分支】**\n\n向远程仓库（别名）推送 本地仓库 的指定分支\n\n**git clone 【https://.....】**\n\n初始化本地库 从远程库克隆到本地 起了别名 origin\n\n**库的拥有者拉取**\n\n1. fetch +merge 操作\n\n##### git fetch 【name】 【分支】\n\n从远程库抓取到本地库，工作区不变 这时候本地有个分支是 **name/分支**\n\n切换到本地 master 分支 调用 git merge name/分支 就可以合并\n\n2. pull 操作\n\n##### git pull【name】 【分支】\n\n冲突产生 需要到本地 解决再 push 到 远程仓库\n\n## 免密操作\n\n$ ssh-keygen -t rsa -C【email】\n\n### 常用操作\n\nidea 远程 pull 前提准备\n\ngit pull origin master --allow-unrelated-histories\n\n推送到上游其它分支\n\ngit push --set-upstream origin myblog（分支）\n","source":"_posts/hello-git.md","raw":"---\ntitle: Hello Git\n---\n\nGit 入门笔记，带你快速使用 Git Bash 命令\n\n# Git 入门\n\ngit 分布式版本控制\n\n记录版本号 ，每个版本都有（高效的压缩解压算法）\n\n## 本地库\n\n本地结构\n\n    1. 本地库\n    1. 暂存区\n    1. 工作区\n\n#### git init\n\n初始化本地库\n\n#### git add **git commit**\n\n工作区 -》**git add** 【】暂存区 -》**git commit** 【】 本地库\n\n工作区 下（.git 同级）未 git add\n\n缓存区 已经 git add 未 git commit\n\n#### git status\n\n查看工作状态\n\n#### git log\n\n提交日志（由近到远）\n\n每一条内容 有一个 key 索引唯一对应\n\n不同展示样式：\n\n##### git log --pretty=oneline\n\n##### git log --oneline\n\n##### git reflog\n\n#### git reset --【】索引\n\n1.使用 hard（使用最多）\n\n​ 本地库的指针移动的同时 同步工作区、暂存区、本地库\n\n2.使用 mixed\n\n​ 本地库的指针移动的同时 同步赞存区、本地库\n\n2.使用 soft\n\n​ 只会让本地移动\n\n#### git diff\n\n比较工作区和暂存区的差异 （带文件比文件 ，不带比所有）\n\n### 分支\n\n新建分支会先将主分支的最新版本然后加到分支\n\n_各自分支相互独立_\n\n#### git branch\n\n##### git branch -v\n\n​ 查看当前所有分支\n\n##### git branch 【】\n\n创建分支\n\n##### git checkout 【】\n\n切换分支\n\n主分支合并 其他分支\n\n1. 切换到主分支\n2. 使用 git merge 【分支】（当主分支和其他分支 都修改了同一文件的同一位置就会冲突）\n3. 解决冲突方法：直接文件选择性删除 （再添加 提交）\n\n## 远程库\n\n**github**\n\n**gitee**\n\n**gitlab**\n\n#### git remote add 【name】【https://.....】\n\n本地库起远程库别名\n\n#### git remote -v\n\n查看别名\n\n**git push 【name】【分支】**\n\n向远程仓库（别名）推送 本地仓库 的指定分支\n\n**git clone 【https://.....】**\n\n初始化本地库 从远程库克隆到本地 起了别名 origin\n\n**库的拥有者拉取**\n\n1. fetch +merge 操作\n\n##### git fetch 【name】 【分支】\n\n从远程库抓取到本地库，工作区不变 这时候本地有个分支是 **name/分支**\n\n切换到本地 master 分支 调用 git merge name/分支 就可以合并\n\n2. pull 操作\n\n##### git pull【name】 【分支】\n\n冲突产生 需要到本地 解决再 push 到 远程仓库\n\n## 免密操作\n\n$ ssh-keygen -t rsa -C【email】\n\n### 常用操作\n\nidea 远程 pull 前提准备\n\ngit pull origin master --allow-unrelated-histories\n\n推送到上游其它分支\n\ngit push --set-upstream origin myblog（分支）\n","slug":"hello-git","published":1,"date":"2022-10-27T05:53:28.883Z","updated":"2022-10-27T05:56:14.257Z","_id":"cl9qnifvq000028tn14lkcdpr","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Git 入门笔记，带你快速使用 Git Bash 命令</p>\n<h1 id=\"Git-入门\"><a href=\"#Git-入门\" class=\"headerlink\" title=\"Git 入门\"></a>Git 入门</h1><p>git 分布式版本控制</p>\n<p>记录版本号 ，每个版本都有（高效的压缩解压算法）</p>\n<h2 id=\"本地库\"><a href=\"#本地库\" class=\"headerlink\" title=\"本地库\"></a>本地库</h2><p>本地结构</p>\n<pre><code class=\"hljs\">1. 本地库\n1. 暂存区\n1. 工作区\n</code></pre>\n<h4 id=\"git-init\"><a href=\"#git-init\" class=\"headerlink\" title=\"git init\"></a>git init</h4><p>初始化本地库</p>\n<h4 id=\"git-add-git-commit\"><a href=\"#git-add-git-commit\" class=\"headerlink\" title=\"git add git commit\"></a>git add <strong>git commit</strong></h4><p>工作区 -》<strong>git add</strong> 【】暂存区 -》<strong>git commit</strong> 【】 本地库</p>\n<p>工作区 下（.git 同级）未 git add</p>\n<p>缓存区 已经 git add 未 git commit</p>\n<h4 id=\"git-status\"><a href=\"#git-status\" class=\"headerlink\" title=\"git status\"></a>git status</h4><p>查看工作状态</p>\n<h4 id=\"git-log\"><a href=\"#git-log\" class=\"headerlink\" title=\"git log\"></a>git log</h4><p>提交日志（由近到远）</p>\n<p>每一条内容 有一个 key 索引唯一对应</p>\n<p>不同展示样式：</p>\n<h5 id=\"git-log-–pretty-oneline\"><a href=\"#git-log-–pretty-oneline\" class=\"headerlink\" title=\"git log –pretty=oneline\"></a>git log –pretty=oneline</h5><h5 id=\"git-log-–oneline\"><a href=\"#git-log-–oneline\" class=\"headerlink\" title=\"git log –oneline\"></a>git log –oneline</h5><h5 id=\"git-reflog\"><a href=\"#git-reflog\" class=\"headerlink\" title=\"git reflog\"></a>git reflog</h5><h4 id=\"git-reset-–【】索引\"><a href=\"#git-reset-–【】索引\" class=\"headerlink\" title=\"git reset –【】索引\"></a>git reset –【】索引</h4><p>1.使用 hard（使用最多）</p>\n<p>​ 本地库的指针移动的同时 同步工作区、暂存区、本地库</p>\n<p>2.使用 mixed</p>\n<p>​ 本地库的指针移动的同时 同步赞存区、本地库</p>\n<p>2.使用 soft</p>\n<p>​ 只会让本地移动</p>\n<h4 id=\"git-diff\"><a href=\"#git-diff\" class=\"headerlink\" title=\"git diff\"></a>git diff</h4><p>比较工作区和暂存区的差异 （带文件比文件 ，不带比所有）</p>\n<h3 id=\"分支\"><a href=\"#分支\" class=\"headerlink\" title=\"分支\"></a>分支</h3><p>新建分支会先将主分支的最新版本然后加到分支</p>\n<p><em>各自分支相互独立</em></p>\n<h4 id=\"git-branch\"><a href=\"#git-branch\" class=\"headerlink\" title=\"git branch\"></a>git branch</h4><h5 id=\"git-branch-v\"><a href=\"#git-branch-v\" class=\"headerlink\" title=\"git branch -v\"></a>git branch -v</h5><p>​ 查看当前所有分支</p>\n<h5 id=\"git-branch-【】\"><a href=\"#git-branch-【】\" class=\"headerlink\" title=\"git branch 【】\"></a>git branch 【】</h5><p>创建分支</p>\n<h5 id=\"git-checkout-【】\"><a href=\"#git-checkout-【】\" class=\"headerlink\" title=\"git checkout 【】\"></a>git checkout 【】</h5><p>切换分支</p>\n<p>主分支合并 其他分支</p>\n<ol>\n<li>切换到主分支</li>\n<li>使用 git merge 【分支】（当主分支和其他分支 都修改了同一文件的同一位置就会冲突）</li>\n<li>解决冲突方法：直接文件选择性删除 （再添加 提交）</li>\n</ol>\n<h2 id=\"远程库\"><a href=\"#远程库\" class=\"headerlink\" title=\"远程库\"></a>远程库</h2><p><strong>github</strong></p>\n<p><strong>gitee</strong></p>\n<p><strong>gitlab</strong></p>\n<h4 id=\"git-remote-add-【name】【https-…-】\"><a href=\"#git-remote-add-【name】【https-…-】\" class=\"headerlink\" title=\"git remote add 【name】【https://…..】\"></a>git remote add 【name】【https://…..】</h4><p>本地库起远程库别名</p>\n<h4 id=\"git-remote-v\"><a href=\"#git-remote-v\" class=\"headerlink\" title=\"git remote -v\"></a>git remote -v</h4><p>查看别名</p>\n<p><strong>git push 【name】【分支】</strong></p>\n<p>向远程仓库（别名）推送 本地仓库 的指定分支</p>\n<p><strong>git clone 【https://…..】</strong></p>\n<p>初始化本地库 从远程库克隆到本地 起了别名 origin</p>\n<p><strong>库的拥有者拉取</strong></p>\n<ol>\n<li>fetch +merge 操作</li>\n</ol>\n<h5 id=\"git-fetch-【name】-【分支】\"><a href=\"#git-fetch-【name】-【分支】\" class=\"headerlink\" title=\"git fetch 【name】 【分支】\"></a>git fetch 【name】 【分支】</h5><p>从远程库抓取到本地库，工作区不变 这时候本地有个分支是 <strong>name/分支</strong></p>\n<p>切换到本地 master 分支 调用 git merge name/分支 就可以合并</p>\n<ol start=\"2\">\n<li>pull 操作</li>\n</ol>\n<h5 id=\"git-pull【name】-【分支】\"><a href=\"#git-pull【name】-【分支】\" class=\"headerlink\" title=\"git pull【name】 【分支】\"></a>git pull【name】 【分支】</h5><p>冲突产生 需要到本地 解决再 push 到 远程仓库</p>\n<h2 id=\"免密操作\"><a href=\"#免密操作\" class=\"headerlink\" title=\"免密操作\"></a>免密操作</h2><p>$ ssh-keygen -t rsa -C【email】</p>\n<h3 id=\"常用操作\"><a href=\"#常用操作\" class=\"headerlink\" title=\"常用操作\"></a>常用操作</h3><p>idea 远程 pull 前提准备</p>\n<p>git pull origin master –allow-unrelated-histories</p>\n<p>推送到上游其它分支</p>\n<p>git push –set-upstream origin myblog（分支）</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Git 入门笔记，带你快速使用 Git Bash 命令</p>\n<h1 id=\"Git-入门\"><a href=\"#Git-入门\" class=\"headerlink\" title=\"Git 入门\"></a>Git 入门</h1><p>git 分布式版本控制</p>\n<p>记录版本号 ，每个版本都有（高效的压缩解压算法）</p>\n<h2 id=\"本地库\"><a href=\"#本地库\" class=\"headerlink\" title=\"本地库\"></a>本地库</h2><p>本地结构</p>\n<pre><code>1. 本地库\n1. 暂存区\n1. 工作区\n</code></pre>\n<h4 id=\"git-init\"><a href=\"#git-init\" class=\"headerlink\" title=\"git init\"></a>git init</h4><p>初始化本地库</p>\n<h4 id=\"git-add-git-commit\"><a href=\"#git-add-git-commit\" class=\"headerlink\" title=\"git add git commit\"></a>git add <strong>git commit</strong></h4><p>工作区 -》<strong>git add</strong> 【】暂存区 -》<strong>git commit</strong> 【】 本地库</p>\n<p>工作区 下（.git 同级）未 git add</p>\n<p>缓存区 已经 git add 未 git commit</p>\n<h4 id=\"git-status\"><a href=\"#git-status\" class=\"headerlink\" title=\"git status\"></a>git status</h4><p>查看工作状态</p>\n<h4 id=\"git-log\"><a href=\"#git-log\" class=\"headerlink\" title=\"git log\"></a>git log</h4><p>提交日志（由近到远）</p>\n<p>每一条内容 有一个 key 索引唯一对应</p>\n<p>不同展示样式：</p>\n<h5 id=\"git-log-–pretty-oneline\"><a href=\"#git-log-–pretty-oneline\" class=\"headerlink\" title=\"git log –pretty=oneline\"></a>git log –pretty=oneline</h5><h5 id=\"git-log-–oneline\"><a href=\"#git-log-–oneline\" class=\"headerlink\" title=\"git log –oneline\"></a>git log –oneline</h5><h5 id=\"git-reflog\"><a href=\"#git-reflog\" class=\"headerlink\" title=\"git reflog\"></a>git reflog</h5><h4 id=\"git-reset-–【】索引\"><a href=\"#git-reset-–【】索引\" class=\"headerlink\" title=\"git reset –【】索引\"></a>git reset –【】索引</h4><p>1.使用 hard（使用最多）</p>\n<p>​ 本地库的指针移动的同时 同步工作区、暂存区、本地库</p>\n<p>2.使用 mixed</p>\n<p>​ 本地库的指针移动的同时 同步赞存区、本地库</p>\n<p>2.使用 soft</p>\n<p>​ 只会让本地移动</p>\n<h4 id=\"git-diff\"><a href=\"#git-diff\" class=\"headerlink\" title=\"git diff\"></a>git diff</h4><p>比较工作区和暂存区的差异 （带文件比文件 ，不带比所有）</p>\n<h3 id=\"分支\"><a href=\"#分支\" class=\"headerlink\" title=\"分支\"></a>分支</h3><p>新建分支会先将主分支的最新版本然后加到分支</p>\n<p><em>各自分支相互独立</em></p>\n<h4 id=\"git-branch\"><a href=\"#git-branch\" class=\"headerlink\" title=\"git branch\"></a>git branch</h4><h5 id=\"git-branch-v\"><a href=\"#git-branch-v\" class=\"headerlink\" title=\"git branch -v\"></a>git branch -v</h5><p>​ 查看当前所有分支</p>\n<h5 id=\"git-branch-【】\"><a href=\"#git-branch-【】\" class=\"headerlink\" title=\"git branch 【】\"></a>git branch 【】</h5><p>创建分支</p>\n<h5 id=\"git-checkout-【】\"><a href=\"#git-checkout-【】\" class=\"headerlink\" title=\"git checkout 【】\"></a>git checkout 【】</h5><p>切换分支</p>\n<p>主分支合并 其他分支</p>\n<ol>\n<li>切换到主分支</li>\n<li>使用 git merge 【分支】（当主分支和其他分支 都修改了同一文件的同一位置就会冲突）</li>\n<li>解决冲突方法：直接文件选择性删除 （再添加 提交）</li>\n</ol>\n<h2 id=\"远程库\"><a href=\"#远程库\" class=\"headerlink\" title=\"远程库\"></a>远程库</h2><p><strong>github</strong></p>\n<p><strong>gitee</strong></p>\n<p><strong>gitlab</strong></p>\n<h4 id=\"git-remote-add-【name】【https-…-】\"><a href=\"#git-remote-add-【name】【https-…-】\" class=\"headerlink\" title=\"git remote add 【name】【https://…..】\"></a>git remote add 【name】【https://…..】</h4><p>本地库起远程库别名</p>\n<h4 id=\"git-remote-v\"><a href=\"#git-remote-v\" class=\"headerlink\" title=\"git remote -v\"></a>git remote -v</h4><p>查看别名</p>\n<p><strong>git push 【name】【分支】</strong></p>\n<p>向远程仓库（别名）推送 本地仓库 的指定分支</p>\n<p><strong>git clone 【https://…..】</strong></p>\n<p>初始化本地库 从远程库克隆到本地 起了别名 origin</p>\n<p><strong>库的拥有者拉取</strong></p>\n<ol>\n<li>fetch +merge 操作</li>\n</ol>\n<h5 id=\"git-fetch-【name】-【分支】\"><a href=\"#git-fetch-【name】-【分支】\" class=\"headerlink\" title=\"git fetch 【name】 【分支】\"></a>git fetch 【name】 【分支】</h5><p>从远程库抓取到本地库，工作区不变 这时候本地有个分支是 <strong>name/分支</strong></p>\n<p>切换到本地 master 分支 调用 git merge name/分支 就可以合并</p>\n<ol start=\"2\">\n<li>pull 操作</li>\n</ol>\n<h5 id=\"git-pull【name】-【分支】\"><a href=\"#git-pull【name】-【分支】\" class=\"headerlink\" title=\"git pull【name】 【分支】\"></a>git pull【name】 【分支】</h5><p>冲突产生 需要到本地 解决再 push 到 远程仓库</p>\n<h2 id=\"免密操作\"><a href=\"#免密操作\" class=\"headerlink\" title=\"免密操作\"></a>免密操作</h2><p>$ ssh-keygen -t rsa -C【email】</p>\n<h3 id=\"常用操作\"><a href=\"#常用操作\" class=\"headerlink\" title=\"常用操作\"></a>常用操作</h3><p>idea 远程 pull 前提准备</p>\n<p>git pull origin master –allow-unrelated-histories</p>\n<p>推送到上游其它分支</p>\n<p>git push –set-upstream origin myblog（分支）</p>\n"},{"title":"WebSocket 实现聊天室","_content":"\n## WebSockect 实现聊天室\n\n**说明：最近二手交易课设有一个需求是实现 购买者和商品发布者有一个聊天对话的功能，类似于咸鱼的聊天对话功能吧。想到的就是 WebSocket 协议来实现，问了一个前端小伙伴，他一般使用 socketio(一个 websocket 框架)，我看了下也有 java 版的，但思考了下决定还是使用原生 websocket 来写前后端。**\n\n#### 什么是 websocket？\n\n这里放一个知乎的高赞回答，看完很清楚。[WebSocket 是什么原理？为什么可以实现持久连接？ - Ovear 的回答 - 知乎](https://www.zhihu.com/question/20215561/answer/40316953)\n\n首先我们先说说大家都很了解的 Http 协议，在 B/S 开发中，我们常用这种协议来进行各种响应和处理。\n\n他的特点就是一个 Request 和 一个 Response 而且是无状态的（想要保持状态需要间接通过 session 和 cookie）。虽然在一些不那么复杂的需求下，这样的机制已经足够了，但是一些复杂的应用场景如需要一直监听某个数据的变化就显得力不从心了。当然我们也可以使用 ajax 来轮询，但这样其实是非常低效率的，你把自己想成服务器，假设有个人（客户端）一直在你耳边叨叨（数据更新了没。。。）我想你也一定要疯掉了吧。\n\n<div align=center><img src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/12570/u=3797482105,2011720067&fm=253&app=138&size=w931&n=0&f=JPEG&fmt=auto\" alt=\"img\" width=\"200\"></div>\n\n其次 Http 协议的另一个特点，浏览器只能主动发送请求接收信息，不能被动接收服务器信息。这一点确实蛋疼，使得一旦数据有了变化我需要自己去请求，但是我又怎么知道数据什么时候更新了呢？\n\n然鹅，websocket 的出现就可以巧妙的解决这些问题。\n\nwebsocket 协由握手和数据传输构成\n\n握手基于 HTTP 协议，然后客户端和服务端实现长连接，所以说 websocket 和 http 是有交集的。\n\n![关系图](https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/12570/6651f2f811ec133b0e6d7e6d0e194b4c_720w.webp)\n\n那么数据如何传输呢？只需要在服务端设立转发的服务，那么数据就可以实现从 A 客户端到 B 客户端的发送，拿聊天举例，正是这种长连接机制以及允许客户端主动接收服务端消息的机制使得聊天消息能够看上去好像在两个客户端建立了连接。其实就是服务器做了一次转发。\n\n#### Java 怎么写服务端的 WebSocket（SpringBoot）\n\n非常类似 Servlet，这里我们需要写**ServerEndPoint**\n\n这里我们主要重写三个方法\n\n1. onOpen(建立连接时自动调用)\n2. onMessage(接收消息时自动调用)\n3. onClose(关闭连接时自动调用)\n\n当然还有 onError 等方法\n\n```Java\n//这个 注解类似http的map ，比如说这样你的 websocket url 就是 ws：localhost/chat\n@ServerEndpoint(value = \"/chat\",configurator = GetHttpSessionConfigurator.class)\n\npublic class ChatEndPoint {\n\n\n    /**\n     *  建立连接被调\n     */\n\n    @OnOpen\n    public void onOpen(Session session, EndpointConfig config){\n\n\n\n    }\n\n    /**\n     * 接收数据被调用\n     */\n\n    @OnMessage\n    public void onMessage(String message,Session session){\n\n\n\n\n    }\n\n    /**\n     * 关闭连接调用\n     */\n    @OnClose\n    public void onClose(Session session){\n\n\n\n    }\n\n\n\n}\n\n```\n\n这里需要注意，上面 session 指的是 websocket 的 session，不是 http 的 session，也是用来标识每一个长连接的对象，看到这里聪明的小伙伴应该能想到实现消息转发可以用 session 来标识每一个用户。\n\n所以我们想要实现聊天消息转发可以使用 map 来存储 websocket 的 session。这里我存储 EndPoint 实例类似，因为我们可以使用 endpoint 实例来获取 session 对象，记住每一个用户进行一次 websocket 长连接，就会创建一个 endpoint 对象。\n\n```Java\n /**\n     * 用来存储每个客户端对象对应的ChatEndpoint对象 key 是uid\n     */\n    private static Map<String,ChatEndPoint> users = new ConcurrentHashMap<>();\n```\n\n说到这里有小伙伴想问了，项目的一些数据存储在 HttpSession 中既然 websocket 是基于 http 的，那么我能不能取出 Httpsession 在 Endpoint 里使用啊？答案是可以的，只需要在 springboot 配置中在注入对象前 ServerEndpointConfig 放入这个 httpsession 就可以了\n\n配置：\n\n```Java\n@Configuration\n\npublic class WebSocketConfig {\n    @Bean\n    public ServerEndpointExporter serverEndpointExporter(){\n        return new ServerEndpointExporter();\n    }\n}\n\n\n\npublic class GetHttpSessionConfigurator extends ServerEndpointConfig.Configurator {\n    @Override\n    public void modifyHandshake(ServerEndpointConfig sec, HandshakeRequest request, HandshakeResponse response) {\n        HttpSession httpSession = (HttpSession)request.getHttpSession();\n\n        //将httpsession存到配置对象\n\n        sec.getUserProperties().put(HttpSession.class.getName(),httpSession);\n    }\n}\n\n@ServerEndpoint(value = \"/chat\",configurator = GetHttpSessionConfigurator.class)\n\n```\n\n获取：\n\n```Java\n @OnOpen\n    public void onOpen(Session session, EndpointConfig config){\n\n        this.session = session;\n\n        //获取Httpssion\n\n       HttpSession httpSession = (HttpSession) \tconfig.getUserProperties().get(HttpSession.class.getName());\n       }\n```\n\n#### 前端怎么写 WebSocket\n\n前端其实也类似，写起来更简单，只需要 new 一个 websocket 对象就能够实现连接。\n\n```Typescript\nlet ws: any = null;\n\nexport default {\n\t//连接\n  connect() {\n    ws = new WebSocket('ws://localhost:8081/api/chat');\n  },\n\t//获取实例\n  getWs() {\n    return ws;\n  },\n  //关闭连接，删除实例\n\n  removeWs() {\n    ws.close();\n  },\n};\n\n```\n\n```Typescript\n \t//调用方法\n \tws.connect();\n\n    ws.getWs().onopen = function () {\n\n    };\n\n    ws.getWs().onmessage = function (evt) {\n    }\n    ws.getWs().onclose = function () {\n\n    };\n```\n\n#### 聊天怎么实现\n\n思路\n\n1.  每一个客户端与服务端建立连接就将 EndPoint 实例存入 userHashMap（这里使用静态的）中。\n2.  客户端断开连接，就将此用户从 userHashMap 去除，所以 userHashMap 始终存储在线用户\n3.  客户端发消息，消息内容需要有发消息人，收消息人，内容，时间，封装成一个对象。\n4.  服务端 onmessage 接收到就检查用户里 userHashMap 有没有此人（有表示在线），有就找到 session 直接转发给他，没有需要暂时存储到 chatsHashMap，存消息列表 。\n5.  那么我们还要修改 1 步骤，这里连接上就要检查 chatsHashMap 有没有自己的消息，有就转发给自己并去除 chatsHashMap 的消息，这样一来就实现了离线和在线用户的聊天功能。\n\n后端全部代码：\n\n```java\n\n@Component\n@ServerEndpoint(value = \"/chat\",configurator = GetHttpSessionConfigurator.class)\n\npublic class ChatEndPoint {\n\n\n    /**\n     * 用来存储每个客户端对象对应的ChatEndpoint对象 key 是uid\n     */\n    private static Map<String,ChatEndPoint> users = new ConcurrentHashMap<>();\n\n    /**\n     *  用来存储每个客户端对象对应的聊天记录 key 是uid value 是json\n     */\n\n    private static Map<String, ArrayList<String>> chats = new ConcurrentHashMap<>();\n\n    /**\n     * websocket session\n     */\n\n    private  Session session;\n\n\n    /**\n     * httpsession\n     */\n    private HttpSession httpSession;\n\n\n\n    /**\n     *  建立连接被调\n     */\n\n    @OnOpen\n    public void onOpen(Session session, EndpointConfig config){\n\n        this.session = session;\n\n        //获取Httpssion\n\n       HttpSession httpSession = (HttpSession) config.getUserProperties().get(HttpSession.class.getName());\n\n       this.httpSession = httpSession;\n\n\n       User user = (User)httpSession.getAttribute(USER_LOGIN_STATE);\n\n\n\n        // 将当前对象存储在 容器中 key为uid\n\n        String uid = String.valueOf(user.getUid());\n\n       users.put(uid,this);\n\n       // 判断并建立 暂存 聊天记录的数据结构\n\n       if(!chats.containsKey(uid)) {\n\n           ArrayList<String> arr = new ArrayList<>();\n           System.out.println(uid+\"调用了一次\");\n           chats.put(uid,arr);\n\n       }\n        String message = MessageUtils.getMessage(true, null,null,null, getUsers());\n\n        System.out.println(message);\n        //连接就一条广播\n        broadcastAllUsers(MessageUtils.getMessage(true, null, null,null,\"当前在线用户人数：\"+users.size()+\"人\"));\n        broadcastAllUsers(message);\n\n        //获取该用户暂存离线消息并推送\n\n        ArrayList<String> chatCache = chats.get(uid);\n\n\n        for(String chat:chatCache){\n//            ChatEndPoint chatEndPoint = users.get(uid);\n//            System.out.println(chat);\n            try {\n                this.session.getBasicRemote().sendText(chat);\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n        chats.remove(uid);\n\n\n    }\n\n    /**\n     * 获取容器里的用户\n     * @return\n     */\n    private Set<String> getUsers(){\n\n        return ChatEndPoint.users.keySet();\n\n    }\n\n    /**\n     * 推送所有客户端\n     */\n\n    private void broadcastAllUsers(String message){\n\n        Set<String> usersSet = users.keySet();\n            try {\n\n                for (String user : usersSet) {\n                    ChatEndPoint chatEndPoint = users.get(user);\n                    chatEndPoint.session.getBasicRemote().sendText(message);\n                }} catch(IOException e){\n                    e.printStackTrace();\n                }\n\n\n            }\n\n\n\n\n    /**\n     * 接收数据被调用\n     */\n\n    @OnMessage\n    public void onMessage(String message,Session session){\n\n\n        ObjectMapper mapper = new ObjectMapper();\n        try {\n            Message mess = mapper.readValue(message, Message.class);\n\n//            System.out.println(mess);\n// 消息的接收者\n            String toUid = mess.getToUid();\n\n            ChatEndPoint chatEndPoint = users.get(toUid);\n\n            User user = (User)httpSession.getAttribute(USER_LOGIN_STATE);\n\n\n\n            if(chatEndPoint!=null){\n\n                // 接收用户在线直接转发\n\n\n\n                if(user==null){\n\n                    throw new BusinessException(ErrorCode.LOGIN_ERROR);\n                }\n\n                String message1 = MessageUtils.getMessage(false, user.getUserName(), user.getUid(),user.getPhone(), mess);\n\n                chatEndPoint.session.getBasicRemote().sendText(message1);\n\n\n\n            }else{\n\n                //接收用户不在线 先暂时存储消息\n\n                ArrayList<String> messages = chats.get(toUid);\n\n                if(messages == null){\n                    messages = new ArrayList<>();\n                    chats.put(toUid,messages);\n\n                }\n\n                //存的就是json\n                messages.add(MessageUtils.getMessage(false, user.getUserName(), user.getUid(),user.getPhone(), mess));\n\n\n\n            }\n\n\n\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n\n\n    }\n\n    /**\n     * 关闭连接调用\n     */\n    @OnClose\n    public void onClose(Session session){\n\n\n        User user = (User)httpSession.getAttribute(USER_LOGIN_STATE);\n\n        users.remove(user.getUid().toString());\n\n        System.out.println(user.getUserName()+\"下线了，当前在线人数：\"+users.size()+\"人\");\n\n\n\n    }\n\n    /**\n     * 获取当前时间戳，秒\n     */\n    private String getUnix(){\n\n        long time = System.currentTimeMillis();\n\n\n        time = time / 1000;\n\n        return String.valueOf(time);\n\n    }\n\n\n}\n\n```\n\n前端接收怎么存储呢？我暂时只想到存储在 sessionStorage 或者 localStorage 中，但这部分数据存储需要考虑去重和数据对应每个用户，不要疏忽了让别的用户看到了不属于自己的对话内容，那就出大问题了。整体思路挺简单的就是要细心。\n\n#### 实现展示\n\n![image-20221125171042690](https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/12570/image-20221125171042690.png)\n\n![image-20221125171211620](https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/12570/image-20221125171211620.png)\n\n![image-20221125171244569](https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/12570/image-20221125171244569.png)\n\n组件采用的是 react-jwchat 感觉挺好看的，各项功能都正常，就是有时候会 websocket 连接了就断开了，猜测是没写 error 处理吧。\n\n#### 写在最后\n\n最后看我的二手交易系统的前后端源码（websocket 源码也在里面）\n\n[react-jwchat 聊天组件](https://gitee.com/wx_504ae56474/react-jwchat)\n\n[二手交易系统前端](https://gitee.com/yilinyo/lkd-javee-trade-frontend)\n\n[二手交易系统后端](https://gitee.com/yilinyo/lkd-javaee-trade-backend)\n","source":"_posts/WebSocket 实现聊天室.md","raw":"---\ntitle: WebSocket 实现聊天室\ntag: 项目\n---\n\n## WebSockect 实现聊天室\n\n**说明：最近二手交易课设有一个需求是实现 购买者和商品发布者有一个聊天对话的功能，类似于咸鱼的聊天对话功能吧。想到的就是 WebSocket 协议来实现，问了一个前端小伙伴，他一般使用 socketio(一个 websocket 框架)，我看了下也有 java 版的，但思考了下决定还是使用原生 websocket 来写前后端。**\n\n#### 什么是 websocket？\n\n这里放一个知乎的高赞回答，看完很清楚。[WebSocket 是什么原理？为什么可以实现持久连接？ - Ovear 的回答 - 知乎](https://www.zhihu.com/question/20215561/answer/40316953)\n\n首先我们先说说大家都很了解的 Http 协议，在 B/S 开发中，我们常用这种协议来进行各种响应和处理。\n\n他的特点就是一个 Request 和 一个 Response 而且是无状态的（想要保持状态需要间接通过 session 和 cookie）。虽然在一些不那么复杂的需求下，这样的机制已经足够了，但是一些复杂的应用场景如需要一直监听某个数据的变化就显得力不从心了。当然我们也可以使用 ajax 来轮询，但这样其实是非常低效率的，你把自己想成服务器，假设有个人（客户端）一直在你耳边叨叨（数据更新了没。。。）我想你也一定要疯掉了吧。\n\n<div align=center><img src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/12570/u=3797482105,2011720067&fm=253&app=138&size=w931&n=0&f=JPEG&fmt=auto\" alt=\"img\" width=\"200\"></div>\n\n其次 Http 协议的另一个特点，浏览器只能主动发送请求接收信息，不能被动接收服务器信息。这一点确实蛋疼，使得一旦数据有了变化我需要自己去请求，但是我又怎么知道数据什么时候更新了呢？\n\n然鹅，websocket 的出现就可以巧妙的解决这些问题。\n\nwebsocket 协由握手和数据传输构成\n\n握手基于 HTTP 协议，然后客户端和服务端实现长连接，所以说 websocket 和 http 是有交集的。\n\n![关系图](https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/12570/6651f2f811ec133b0e6d7e6d0e194b4c_720w.webp)\n\n那么数据如何传输呢？只需要在服务端设立转发的服务，那么数据就可以实现从 A 客户端到 B 客户端的发送，拿聊天举例，正是这种长连接机制以及允许客户端主动接收服务端消息的机制使得聊天消息能够看上去好像在两个客户端建立了连接。其实就是服务器做了一次转发。\n\n#### Java 怎么写服务端的 WebSocket（SpringBoot）\n\n非常类似 Servlet，这里我们需要写**ServerEndPoint**\n\n这里我们主要重写三个方法\n\n1. onOpen(建立连接时自动调用)\n2. onMessage(接收消息时自动调用)\n3. onClose(关闭连接时自动调用)\n\n当然还有 onError 等方法\n\n```Java\n//这个 注解类似http的map ，比如说这样你的 websocket url 就是 ws：localhost/chat\n@ServerEndpoint(value = \"/chat\",configurator = GetHttpSessionConfigurator.class)\n\npublic class ChatEndPoint {\n\n\n    /**\n     *  建立连接被调\n     */\n\n    @OnOpen\n    public void onOpen(Session session, EndpointConfig config){\n\n\n\n    }\n\n    /**\n     * 接收数据被调用\n     */\n\n    @OnMessage\n    public void onMessage(String message,Session session){\n\n\n\n\n    }\n\n    /**\n     * 关闭连接调用\n     */\n    @OnClose\n    public void onClose(Session session){\n\n\n\n    }\n\n\n\n}\n\n```\n\n这里需要注意，上面 session 指的是 websocket 的 session，不是 http 的 session，也是用来标识每一个长连接的对象，看到这里聪明的小伙伴应该能想到实现消息转发可以用 session 来标识每一个用户。\n\n所以我们想要实现聊天消息转发可以使用 map 来存储 websocket 的 session。这里我存储 EndPoint 实例类似，因为我们可以使用 endpoint 实例来获取 session 对象，记住每一个用户进行一次 websocket 长连接，就会创建一个 endpoint 对象。\n\n```Java\n /**\n     * 用来存储每个客户端对象对应的ChatEndpoint对象 key 是uid\n     */\n    private static Map<String,ChatEndPoint> users = new ConcurrentHashMap<>();\n```\n\n说到这里有小伙伴想问了，项目的一些数据存储在 HttpSession 中既然 websocket 是基于 http 的，那么我能不能取出 Httpsession 在 Endpoint 里使用啊？答案是可以的，只需要在 springboot 配置中在注入对象前 ServerEndpointConfig 放入这个 httpsession 就可以了\n\n配置：\n\n```Java\n@Configuration\n\npublic class WebSocketConfig {\n    @Bean\n    public ServerEndpointExporter serverEndpointExporter(){\n        return new ServerEndpointExporter();\n    }\n}\n\n\n\npublic class GetHttpSessionConfigurator extends ServerEndpointConfig.Configurator {\n    @Override\n    public void modifyHandshake(ServerEndpointConfig sec, HandshakeRequest request, HandshakeResponse response) {\n        HttpSession httpSession = (HttpSession)request.getHttpSession();\n\n        //将httpsession存到配置对象\n\n        sec.getUserProperties().put(HttpSession.class.getName(),httpSession);\n    }\n}\n\n@ServerEndpoint(value = \"/chat\",configurator = GetHttpSessionConfigurator.class)\n\n```\n\n获取：\n\n```Java\n @OnOpen\n    public void onOpen(Session session, EndpointConfig config){\n\n        this.session = session;\n\n        //获取Httpssion\n\n       HttpSession httpSession = (HttpSession) \tconfig.getUserProperties().get(HttpSession.class.getName());\n       }\n```\n\n#### 前端怎么写 WebSocket\n\n前端其实也类似，写起来更简单，只需要 new 一个 websocket 对象就能够实现连接。\n\n```Typescript\nlet ws: any = null;\n\nexport default {\n\t//连接\n  connect() {\n    ws = new WebSocket('ws://localhost:8081/api/chat');\n  },\n\t//获取实例\n  getWs() {\n    return ws;\n  },\n  //关闭连接，删除实例\n\n  removeWs() {\n    ws.close();\n  },\n};\n\n```\n\n```Typescript\n \t//调用方法\n \tws.connect();\n\n    ws.getWs().onopen = function () {\n\n    };\n\n    ws.getWs().onmessage = function (evt) {\n    }\n    ws.getWs().onclose = function () {\n\n    };\n```\n\n#### 聊天怎么实现\n\n思路\n\n1.  每一个客户端与服务端建立连接就将 EndPoint 实例存入 userHashMap（这里使用静态的）中。\n2.  客户端断开连接，就将此用户从 userHashMap 去除，所以 userHashMap 始终存储在线用户\n3.  客户端发消息，消息内容需要有发消息人，收消息人，内容，时间，封装成一个对象。\n4.  服务端 onmessage 接收到就检查用户里 userHashMap 有没有此人（有表示在线），有就找到 session 直接转发给他，没有需要暂时存储到 chatsHashMap，存消息列表 。\n5.  那么我们还要修改 1 步骤，这里连接上就要检查 chatsHashMap 有没有自己的消息，有就转发给自己并去除 chatsHashMap 的消息，这样一来就实现了离线和在线用户的聊天功能。\n\n后端全部代码：\n\n```java\n\n@Component\n@ServerEndpoint(value = \"/chat\",configurator = GetHttpSessionConfigurator.class)\n\npublic class ChatEndPoint {\n\n\n    /**\n     * 用来存储每个客户端对象对应的ChatEndpoint对象 key 是uid\n     */\n    private static Map<String,ChatEndPoint> users = new ConcurrentHashMap<>();\n\n    /**\n     *  用来存储每个客户端对象对应的聊天记录 key 是uid value 是json\n     */\n\n    private static Map<String, ArrayList<String>> chats = new ConcurrentHashMap<>();\n\n    /**\n     * websocket session\n     */\n\n    private  Session session;\n\n\n    /**\n     * httpsession\n     */\n    private HttpSession httpSession;\n\n\n\n    /**\n     *  建立连接被调\n     */\n\n    @OnOpen\n    public void onOpen(Session session, EndpointConfig config){\n\n        this.session = session;\n\n        //获取Httpssion\n\n       HttpSession httpSession = (HttpSession) config.getUserProperties().get(HttpSession.class.getName());\n\n       this.httpSession = httpSession;\n\n\n       User user = (User)httpSession.getAttribute(USER_LOGIN_STATE);\n\n\n\n        // 将当前对象存储在 容器中 key为uid\n\n        String uid = String.valueOf(user.getUid());\n\n       users.put(uid,this);\n\n       // 判断并建立 暂存 聊天记录的数据结构\n\n       if(!chats.containsKey(uid)) {\n\n           ArrayList<String> arr = new ArrayList<>();\n           System.out.println(uid+\"调用了一次\");\n           chats.put(uid,arr);\n\n       }\n        String message = MessageUtils.getMessage(true, null,null,null, getUsers());\n\n        System.out.println(message);\n        //连接就一条广播\n        broadcastAllUsers(MessageUtils.getMessage(true, null, null,null,\"当前在线用户人数：\"+users.size()+\"人\"));\n        broadcastAllUsers(message);\n\n        //获取该用户暂存离线消息并推送\n\n        ArrayList<String> chatCache = chats.get(uid);\n\n\n        for(String chat:chatCache){\n//            ChatEndPoint chatEndPoint = users.get(uid);\n//            System.out.println(chat);\n            try {\n                this.session.getBasicRemote().sendText(chat);\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n        chats.remove(uid);\n\n\n    }\n\n    /**\n     * 获取容器里的用户\n     * @return\n     */\n    private Set<String> getUsers(){\n\n        return ChatEndPoint.users.keySet();\n\n    }\n\n    /**\n     * 推送所有客户端\n     */\n\n    private void broadcastAllUsers(String message){\n\n        Set<String> usersSet = users.keySet();\n            try {\n\n                for (String user : usersSet) {\n                    ChatEndPoint chatEndPoint = users.get(user);\n                    chatEndPoint.session.getBasicRemote().sendText(message);\n                }} catch(IOException e){\n                    e.printStackTrace();\n                }\n\n\n            }\n\n\n\n\n    /**\n     * 接收数据被调用\n     */\n\n    @OnMessage\n    public void onMessage(String message,Session session){\n\n\n        ObjectMapper mapper = new ObjectMapper();\n        try {\n            Message mess = mapper.readValue(message, Message.class);\n\n//            System.out.println(mess);\n// 消息的接收者\n            String toUid = mess.getToUid();\n\n            ChatEndPoint chatEndPoint = users.get(toUid);\n\n            User user = (User)httpSession.getAttribute(USER_LOGIN_STATE);\n\n\n\n            if(chatEndPoint!=null){\n\n                // 接收用户在线直接转发\n\n\n\n                if(user==null){\n\n                    throw new BusinessException(ErrorCode.LOGIN_ERROR);\n                }\n\n                String message1 = MessageUtils.getMessage(false, user.getUserName(), user.getUid(),user.getPhone(), mess);\n\n                chatEndPoint.session.getBasicRemote().sendText(message1);\n\n\n\n            }else{\n\n                //接收用户不在线 先暂时存储消息\n\n                ArrayList<String> messages = chats.get(toUid);\n\n                if(messages == null){\n                    messages = new ArrayList<>();\n                    chats.put(toUid,messages);\n\n                }\n\n                //存的就是json\n                messages.add(MessageUtils.getMessage(false, user.getUserName(), user.getUid(),user.getPhone(), mess));\n\n\n\n            }\n\n\n\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n\n\n    }\n\n    /**\n     * 关闭连接调用\n     */\n    @OnClose\n    public void onClose(Session session){\n\n\n        User user = (User)httpSession.getAttribute(USER_LOGIN_STATE);\n\n        users.remove(user.getUid().toString());\n\n        System.out.println(user.getUserName()+\"下线了，当前在线人数：\"+users.size()+\"人\");\n\n\n\n    }\n\n    /**\n     * 获取当前时间戳，秒\n     */\n    private String getUnix(){\n\n        long time = System.currentTimeMillis();\n\n\n        time = time / 1000;\n\n        return String.valueOf(time);\n\n    }\n\n\n}\n\n```\n\n前端接收怎么存储呢？我暂时只想到存储在 sessionStorage 或者 localStorage 中，但这部分数据存储需要考虑去重和数据对应每个用户，不要疏忽了让别的用户看到了不属于自己的对话内容，那就出大问题了。整体思路挺简单的就是要细心。\n\n#### 实现展示\n\n![image-20221125171042690](https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/12570/image-20221125171042690.png)\n\n![image-20221125171211620](https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/12570/image-20221125171211620.png)\n\n![image-20221125171244569](https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/12570/image-20221125171244569.png)\n\n组件采用的是 react-jwchat 感觉挺好看的，各项功能都正常，就是有时候会 websocket 连接了就断开了，猜测是没写 error 处理吧。\n\n#### 写在最后\n\n最后看我的二手交易系统的前后端源码（websocket 源码也在里面）\n\n[react-jwchat 聊天组件](https://gitee.com/wx_504ae56474/react-jwchat)\n\n[二手交易系统前端](https://gitee.com/yilinyo/lkd-javee-trade-frontend)\n\n[二手交易系统后端](https://gitee.com/yilinyo/lkd-javaee-trade-backend)\n","slug":"WebSocket 实现聊天室","published":1,"date":"2022-11-26T10:16:24.707Z","updated":"2022-11-26T11:37:46.747Z","_id":"claxuyez90000q8tn5ncr6e9h","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"WebSockect-实现聊天室\"><a href=\"#WebSockect-实现聊天室\" class=\"headerlink\" title=\"WebSockect 实现聊天室\"></a>WebSockect 实现聊天室</h2><p><strong>说明：最近二手交易课设有一个需求是实现 购买者和商品发布者有一个聊天对话的功能，类似于咸鱼的聊天对话功能吧。想到的就是 WebSocket 协议来实现，问了一个前端小伙伴，他一般使用 socketio(一个 websocket 框架)，我看了下也有 java 版的，但思考了下决定还是使用原生 websocket 来写前后端。</strong></p>\n<h4 id=\"什么是-websocket？\"><a href=\"#什么是-websocket？\" class=\"headerlink\" title=\"什么是 websocket？\"></a>什么是 websocket？</h4><p>这里放一个知乎的高赞回答，看完很清楚。<a href=\"https://www.zhihu.com/question/20215561/answer/40316953\">WebSocket 是什么原理？为什么可以实现持久连接？ - Ovear 的回答 - 知乎</a></p>\n<p>首先我们先说说大家都很了解的 Http 协议，在 B/S 开发中，我们常用这种协议来进行各种响应和处理。</p>\n<p>他的特点就是一个 Request 和 一个 Response 而且是无状态的（想要保持状态需要间接通过 session 和 cookie）。虽然在一些不那么复杂的需求下，这样的机制已经足够了，但是一些复杂的应用场景如需要一直监听某个数据的变化就显得力不从心了。当然我们也可以使用 ajax 来轮询，但这样其实是非常低效率的，你把自己想成服务器，假设有个人（客户端）一直在你耳边叨叨（数据更新了没。。。）我想你也一定要疯掉了吧。</p>\n<div align=center><img src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/12570/u=3797482105,2011720067&fm=253&app=138&size=w931&n=0&f=JPEG&fmt=auto\" alt=\"img\" width=\"200\"></div>\n\n<p>其次 Http 协议的另一个特点，浏览器只能主动发送请求接收信息，不能被动接收服务器信息。这一点确实蛋疼，使得一旦数据有了变化我需要自己去请求，但是我又怎么知道数据什么时候更新了呢？</p>\n<p>然鹅，websocket 的出现就可以巧妙的解决这些问题。</p>\n<p>websocket 协由握手和数据传输构成</p>\n<p>握手基于 HTTP 协议，然后客户端和服务端实现长连接，所以说 websocket 和 http 是有交集的。</p>\n<p><img src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/12570/6651f2f811ec133b0e6d7e6d0e194b4c_720w.webp\" alt=\"关系图\"></p>\n<p>那么数据如何传输呢？只需要在服务端设立转发的服务，那么数据就可以实现从 A 客户端到 B 客户端的发送，拿聊天举例，正是这种长连接机制以及允许客户端主动接收服务端消息的机制使得聊天消息能够看上去好像在两个客户端建立了连接。其实就是服务器做了一次转发。</p>\n<h4 id=\"Java-怎么写服务端的-WebSocket（SpringBoot）\"><a href=\"#Java-怎么写服务端的-WebSocket（SpringBoot）\" class=\"headerlink\" title=\"Java 怎么写服务端的 WebSocket（SpringBoot）\"></a>Java 怎么写服务端的 WebSocket（SpringBoot）</h4><p>非常类似 Servlet，这里我们需要写<strong>ServerEndPoint</strong></p>\n<p>这里我们主要重写三个方法</p>\n<ol>\n<li>onOpen(建立连接时自动调用)</li>\n<li>onMessage(接收消息时自动调用)</li>\n<li>onClose(关闭连接时自动调用)</li>\n</ol>\n<p>当然还有 onError 等方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Java\"><span class=\"hljs-comment\">//这个 注解类似http的map ，比如说这样你的 websocket url 就是 ws：localhost/chat</span><br><span class=\"hljs-meta\">@ServerEndpoint(value = &quot;/chat&quot;,configurator = GetHttpSessionConfigurator.class)</span><br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ChatEndPoint</span> &#123;<br><br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     *  建立连接被调</span><br><span class=\"hljs-comment\">     */</span><br><br>    <span class=\"hljs-meta\">@OnOpen</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">onOpen</span><span class=\"hljs-params\">(Session session, EndpointConfig config)</span>&#123;<br><br><br><br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 接收数据被调用</span><br><span class=\"hljs-comment\">     */</span><br><br>    <span class=\"hljs-meta\">@OnMessage</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">onMessage</span><span class=\"hljs-params\">(String message,Session session)</span>&#123;<br><br><br><br><br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 关闭连接调用</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@OnClose</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">onClose</span><span class=\"hljs-params\">(Session session)</span>&#123;<br><br><br><br>    &#125;<br><br><br><br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<p>这里需要注意，上面 session 指的是 websocket 的 session，不是 http 的 session，也是用来标识每一个长连接的对象，看到这里聪明的小伙伴应该能想到实现消息转发可以用 session 来标识每一个用户。</p>\n<p>所以我们想要实现聊天消息转发可以使用 map 来存储 websocket 的 session。这里我存储 EndPoint 实例类似，因为我们可以使用 endpoint 实例来获取 session 对象，记住每一个用户进行一次 websocket 长连接，就会创建一个 endpoint 对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">    * 用来存储每个客户端对象对应的ChatEndpoint对象 key 是uid</span><br><span class=\"hljs-comment\">    */</span><br>   <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> Map&lt;String,ChatEndPoint&gt; users = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ConcurrentHashMap</span>&lt;&gt;();<br></code></pre></td></tr></table></figure>\n\n<p>说到这里有小伙伴想问了，项目的一些数据存储在 HttpSession 中既然 websocket 是基于 http 的，那么我能不能取出 Httpsession 在 Endpoint 里使用啊？答案是可以的，只需要在 springboot 配置中在注入对象前 ServerEndpointConfig 放入这个 httpsession 就可以了</p>\n<p>配置：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Java\"><span class=\"hljs-meta\">@Configuration</span><br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">WebSocketConfig</span> &#123;<br>    <span class=\"hljs-meta\">@Bean</span><br>    <span class=\"hljs-keyword\">public</span> ServerEndpointExporter <span class=\"hljs-title function_\">serverEndpointExporter</span><span class=\"hljs-params\">()</span>&#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ServerEndpointExporter</span>();<br>    &#125;<br>&#125;<br><br><br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">GetHttpSessionConfigurator</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">ServerEndpointConfig</span>.Configurator &#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">modifyHandshake</span><span class=\"hljs-params\">(ServerEndpointConfig sec, HandshakeRequest request, HandshakeResponse response)</span> &#123;<br>        <span class=\"hljs-type\">HttpSession</span> <span class=\"hljs-variable\">httpSession</span> <span class=\"hljs-operator\">=</span> (HttpSession)request.getHttpSession();<br><br>        <span class=\"hljs-comment\">//将httpsession存到配置对象</span><br><br>        sec.getUserProperties().put(HttpSession.class.getName(),httpSession);<br>    &#125;<br>&#125;<br><br><span class=\"hljs-meta\">@ServerEndpoint(value = &quot;/chat&quot;,configurator = GetHttpSessionConfigurator.class)</span><br><br></code></pre></td></tr></table></figure>\n\n<p>获取：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Java\"><span class=\"hljs-meta\">@OnOpen</span><br>   <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">onOpen</span><span class=\"hljs-params\">(Session session, EndpointConfig config)</span>&#123;<br><br>       <span class=\"hljs-built_in\">this</span>.session = session;<br><br>       <span class=\"hljs-comment\">//获取Httpssion</span><br><br>      <span class=\"hljs-type\">HttpSession</span> <span class=\"hljs-variable\">httpSession</span> <span class=\"hljs-operator\">=</span> (HttpSession) \tconfig.getUserProperties().get(HttpSession.class.getName());<br>      &#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"前端怎么写-WebSocket\"><a href=\"#前端怎么写-WebSocket\" class=\"headerlink\" title=\"前端怎么写 WebSocket\"></a>前端怎么写 WebSocket</h4><p>前端其实也类似，写起来更简单，只需要 new 一个 websocket 对象就能够实现连接。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Typescript\"><span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">ws</span>: <span class=\"hljs-built_in\">any</span> = <span class=\"hljs-literal\">null</span>;<br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;<br>\t<span class=\"hljs-comment\">//连接</span><br>  <span class=\"hljs-title function_\">connect</span>(<span class=\"hljs-params\"></span>) &#123;<br>    ws = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">WebSocket</span>(<span class=\"hljs-string\">&#x27;ws://localhost:8081/api/chat&#x27;</span>);<br>  &#125;,<br>\t<span class=\"hljs-comment\">//获取实例</span><br>  <span class=\"hljs-title function_\">getWs</span>(<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-keyword\">return</span> ws;<br>  &#125;,<br>  <span class=\"hljs-comment\">//关闭连接，删除实例</span><br><br>  <span class=\"hljs-title function_\">removeWs</span>(<span class=\"hljs-params\"></span>) &#123;<br>    ws.<span class=\"hljs-title function_\">close</span>();<br>  &#125;,<br>&#125;;<br><br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Typescript\"><span class=\"hljs-comment\">//调用方法</span><br>ws.<span class=\"hljs-title function_\">connect</span>();<br><br>  ws.<span class=\"hljs-title function_\">getWs</span>().<span class=\"hljs-property\">onopen</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br><br>  &#125;;<br><br>  ws.<span class=\"hljs-title function_\">getWs</span>().<span class=\"hljs-property\">onmessage</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">evt</span>) &#123;<br>  &#125;<br>  ws.<span class=\"hljs-title function_\">getWs</span>().<span class=\"hljs-property\">onclose</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br><br>  &#125;;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"聊天怎么实现\"><a href=\"#聊天怎么实现\" class=\"headerlink\" title=\"聊天怎么实现\"></a>聊天怎么实现</h4><p>思路</p>\n<ol>\n<li> 每一个客户端与服务端建立连接就将 EndPoint 实例存入 userHashMap（这里使用静态的）中。</li>\n<li> 客户端断开连接，就将此用户从 userHashMap 去除，所以 userHashMap 始终存储在线用户</li>\n<li> 客户端发消息，消息内容需要有发消息人，收消息人，内容，时间，封装成一个对象。</li>\n<li> 服务端 onmessage 接收到就检查用户里 userHashMap 有没有此人（有表示在线），有就找到 session 直接转发给他，没有需要暂时存储到 chatsHashMap，存消息列表 。</li>\n<li> 那么我们还要修改 1 步骤，这里连接上就要检查 chatsHashMap 有没有自己的消息，有就转发给自己并去除 chatsHashMap 的消息，这样一来就实现了离线和在线用户的聊天功能。</li>\n</ol>\n<p>后端全部代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><br><span class=\"hljs-meta\">@Component</span><br><span class=\"hljs-meta\">@ServerEndpoint(value = &quot;/chat&quot;,configurator = GetHttpSessionConfigurator.class)</span><br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ChatEndPoint</span> &#123;<br><br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 用来存储每个客户端对象对应的ChatEndpoint对象 key 是uid</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> Map&lt;String,ChatEndPoint&gt; users = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ConcurrentHashMap</span>&lt;&gt;();<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     *  用来存储每个客户端对象对应的聊天记录 key 是uid value 是json</span><br><span class=\"hljs-comment\">     */</span><br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> Map&lt;String, ArrayList&lt;String&gt;&gt; chats = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ConcurrentHashMap</span>&lt;&gt;();<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * websocket session</span><br><span class=\"hljs-comment\">     */</span><br><br>    <span class=\"hljs-keyword\">private</span>  Session session;<br><br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * httpsession</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">private</span> HttpSession httpSession;<br><br><br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     *  建立连接被调</span><br><span class=\"hljs-comment\">     */</span><br><br>    <span class=\"hljs-meta\">@OnOpen</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">onOpen</span><span class=\"hljs-params\">(Session session, EndpointConfig config)</span>&#123;<br><br>        <span class=\"hljs-built_in\">this</span>.session = session;<br><br>        <span class=\"hljs-comment\">//获取Httpssion</span><br><br>       <span class=\"hljs-type\">HttpSession</span> <span class=\"hljs-variable\">httpSession</span> <span class=\"hljs-operator\">=</span> (HttpSession) config.getUserProperties().get(HttpSession.class.getName());<br><br>       <span class=\"hljs-built_in\">this</span>.httpSession = httpSession;<br><br><br>       <span class=\"hljs-type\">User</span> <span class=\"hljs-variable\">user</span> <span class=\"hljs-operator\">=</span> (User)httpSession.getAttribute(USER_LOGIN_STATE);<br><br><br><br>        <span class=\"hljs-comment\">// 将当前对象存储在 容器中 key为uid</span><br><br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">uid</span> <span class=\"hljs-operator\">=</span> String.valueOf(user.getUid());<br><br>       users.put(uid,<span class=\"hljs-built_in\">this</span>);<br><br>       <span class=\"hljs-comment\">// 判断并建立 暂存 聊天记录的数据结构</span><br><br>       <span class=\"hljs-keyword\">if</span>(!chats.containsKey(uid)) &#123;<br><br>           ArrayList&lt;String&gt; arr = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();<br>           System.out.println(uid+<span class=\"hljs-string\">&quot;调用了一次&quot;</span>);<br>           chats.put(uid,arr);<br><br>       &#125;<br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">message</span> <span class=\"hljs-operator\">=</span> MessageUtils.getMessage(<span class=\"hljs-literal\">true</span>, <span class=\"hljs-literal\">null</span>,<span class=\"hljs-literal\">null</span>,<span class=\"hljs-literal\">null</span>, getUsers());<br><br>        System.out.println(message);<br>        <span class=\"hljs-comment\">//连接就一条广播</span><br>        broadcastAllUsers(MessageUtils.getMessage(<span class=\"hljs-literal\">true</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-literal\">null</span>,<span class=\"hljs-literal\">null</span>,<span class=\"hljs-string\">&quot;当前在线用户人数：&quot;</span>+users.size()+<span class=\"hljs-string\">&quot;人&quot;</span>));<br>        broadcastAllUsers(message);<br><br>        <span class=\"hljs-comment\">//获取该用户暂存离线消息并推送</span><br><br>        ArrayList&lt;String&gt; chatCache = chats.get(uid);<br><br><br>        <span class=\"hljs-keyword\">for</span>(String chat:chatCache)&#123;<br><span class=\"hljs-comment\">//            ChatEndPoint chatEndPoint = users.get(uid);</span><br><span class=\"hljs-comment\">//            System.out.println(chat);</span><br>            <span class=\"hljs-keyword\">try</span> &#123;<br>                <span class=\"hljs-built_in\">this</span>.session.getBasicRemote().sendText(chat);<br>            &#125; <span class=\"hljs-keyword\">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>        chats.remove(uid);<br><br><br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 获取容器里的用户</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span></span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">private</span> Set&lt;String&gt; <span class=\"hljs-title function_\">getUsers</span><span class=\"hljs-params\">()</span>&#123;<br><br>        <span class=\"hljs-keyword\">return</span> ChatEndPoint.users.keySet();<br><br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 推送所有客户端</span><br><span class=\"hljs-comment\">     */</span><br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">broadcastAllUsers</span><span class=\"hljs-params\">(String message)</span>&#123;<br><br>        Set&lt;String&gt; usersSet = users.keySet();<br>            <span class=\"hljs-keyword\">try</span> &#123;<br><br>                <span class=\"hljs-keyword\">for</span> (String user : usersSet) &#123;<br>                    <span class=\"hljs-type\">ChatEndPoint</span> <span class=\"hljs-variable\">chatEndPoint</span> <span class=\"hljs-operator\">=</span> users.get(user);<br>                    chatEndPoint.session.getBasicRemote().sendText(message);<br>                &#125;&#125; <span class=\"hljs-keyword\">catch</span>(IOException e)&#123;<br>                    e.printStackTrace();<br>                &#125;<br><br><br>            &#125;<br><br><br><br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 接收数据被调用</span><br><span class=\"hljs-comment\">     */</span><br><br>    <span class=\"hljs-meta\">@OnMessage</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">onMessage</span><span class=\"hljs-params\">(String message,Session session)</span>&#123;<br><br><br>        <span class=\"hljs-type\">ObjectMapper</span> <span class=\"hljs-variable\">mapper</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ObjectMapper</span>();<br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            <span class=\"hljs-type\">Message</span> <span class=\"hljs-variable\">mess</span> <span class=\"hljs-operator\">=</span> mapper.readValue(message, Message.class);<br><br><span class=\"hljs-comment\">//            System.out.println(mess);</span><br><span class=\"hljs-comment\">// 消息的接收者</span><br>            <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">toUid</span> <span class=\"hljs-operator\">=</span> mess.getToUid();<br><br>            <span class=\"hljs-type\">ChatEndPoint</span> <span class=\"hljs-variable\">chatEndPoint</span> <span class=\"hljs-operator\">=</span> users.get(toUid);<br><br>            <span class=\"hljs-type\">User</span> <span class=\"hljs-variable\">user</span> <span class=\"hljs-operator\">=</span> (User)httpSession.getAttribute(USER_LOGIN_STATE);<br><br><br><br>            <span class=\"hljs-keyword\">if</span>(chatEndPoint!=<span class=\"hljs-literal\">null</span>)&#123;<br><br>                <span class=\"hljs-comment\">// 接收用户在线直接转发</span><br><br><br><br>                <span class=\"hljs-keyword\">if</span>(user==<span class=\"hljs-literal\">null</span>)&#123;<br><br>                    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BusinessException</span>(ErrorCode.LOGIN_ERROR);<br>                &#125;<br><br>                <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">message1</span> <span class=\"hljs-operator\">=</span> MessageUtils.getMessage(<span class=\"hljs-literal\">false</span>, user.getUserName(), user.getUid(),user.getPhone(), mess);<br><br>                chatEndPoint.session.getBasicRemote().sendText(message1);<br><br><br><br>            &#125;<span class=\"hljs-keyword\">else</span>&#123;<br><br>                <span class=\"hljs-comment\">//接收用户不在线 先暂时存储消息</span><br><br>                ArrayList&lt;String&gt; messages = chats.get(toUid);<br><br>                <span class=\"hljs-keyword\">if</span>(messages == <span class=\"hljs-literal\">null</span>)&#123;<br>                    messages = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();<br>                    chats.put(toUid,messages);<br><br>                &#125;<br><br>                <span class=\"hljs-comment\">//存的就是json</span><br>                messages.add(MessageUtils.getMessage(<span class=\"hljs-literal\">false</span>, user.getUserName(), user.getUid(),user.getPhone(), mess));<br><br><br><br>            &#125;<br><br><br><br>        &#125; <span class=\"hljs-keyword\">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br><br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 关闭连接调用</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@OnClose</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">onClose</span><span class=\"hljs-params\">(Session session)</span>&#123;<br><br><br>        <span class=\"hljs-type\">User</span> <span class=\"hljs-variable\">user</span> <span class=\"hljs-operator\">=</span> (User)httpSession.getAttribute(USER_LOGIN_STATE);<br><br>        users.remove(user.getUid().toString());<br><br>        System.out.println(user.getUserName()+<span class=\"hljs-string\">&quot;下线了，当前在线人数：&quot;</span>+users.size()+<span class=\"hljs-string\">&quot;人&quot;</span>);<br><br><br><br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 获取当前时间戳，秒</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">private</span> String <span class=\"hljs-title function_\">getUnix</span><span class=\"hljs-params\">()</span>&#123;<br><br>        <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">time</span> <span class=\"hljs-operator\">=</span> System.currentTimeMillis();<br><br><br>        time = time / <span class=\"hljs-number\">1000</span>;<br><br>        <span class=\"hljs-keyword\">return</span> String.valueOf(time);<br><br>    &#125;<br><br><br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<p>前端接收怎么存储呢？我暂时只想到存储在 sessionStorage 或者 localStorage 中，但这部分数据存储需要考虑去重和数据对应每个用户，不要疏忽了让别的用户看到了不属于自己的对话内容，那就出大问题了。整体思路挺简单的就是要细心。</p>\n<h4 id=\"实现展示\"><a href=\"#实现展示\" class=\"headerlink\" title=\"实现展示\"></a>实现展示</h4><p><img src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/12570/image-20221125171042690.png\" alt=\"image-20221125171042690\"></p>\n<p><img src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/12570/image-20221125171211620.png\" alt=\"image-20221125171211620\"></p>\n<p><img src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/12570/image-20221125171244569.png\" alt=\"image-20221125171244569\"></p>\n<p>组件采用的是 react-jwchat 感觉挺好看的，各项功能都正常，就是有时候会 websocket 连接了就断开了，猜测是没写 error 处理吧。</p>\n<h4 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h4><p>最后看我的二手交易系统的前后端源码（websocket 源码也在里面）</p>\n<p><a href=\"https://gitee.com/wx_504ae56474/react-jwchat\">react-jwchat 聊天组件</a></p>\n<p><a href=\"https://gitee.com/yilinyo/lkd-javee-trade-frontend\">二手交易系统前端</a></p>\n<p><a href=\"https://gitee.com/yilinyo/lkd-javaee-trade-backend\">二手交易系统后端</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"WebSockect-实现聊天室\"><a href=\"#WebSockect-实现聊天室\" class=\"headerlink\" title=\"WebSockect 实现聊天室\"></a>WebSockect 实现聊天室</h2><p><strong>说明：最近二手交易课设有一个需求是实现 购买者和商品发布者有一个聊天对话的功能，类似于咸鱼的聊天对话功能吧。想到的就是 WebSocket 协议来实现，问了一个前端小伙伴，他一般使用 socketio(一个 websocket 框架)，我看了下也有 java 版的，但思考了下决定还是使用原生 websocket 来写前后端。</strong></p>\n<h4 id=\"什么是-websocket？\"><a href=\"#什么是-websocket？\" class=\"headerlink\" title=\"什么是 websocket？\"></a>什么是 websocket？</h4><p>这里放一个知乎的高赞回答，看完很清楚。<a href=\"https://www.zhihu.com/question/20215561/answer/40316953\">WebSocket 是什么原理？为什么可以实现持久连接？ - Ovear 的回答 - 知乎</a></p>\n<p>首先我们先说说大家都很了解的 Http 协议，在 B/S 开发中，我们常用这种协议来进行各种响应和处理。</p>\n<p>他的特点就是一个 Request 和 一个 Response 而且是无状态的（想要保持状态需要间接通过 session 和 cookie）。虽然在一些不那么复杂的需求下，这样的机制已经足够了，但是一些复杂的应用场景如需要一直监听某个数据的变化就显得力不从心了。当然我们也可以使用 ajax 来轮询，但这样其实是非常低效率的，你把自己想成服务器，假设有个人（客户端）一直在你耳边叨叨（数据更新了没。。。）我想你也一定要疯掉了吧。</p>\n<div align=center><img src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/12570/u=3797482105,2011720067&fm=253&app=138&size=w931&n=0&f=JPEG&fmt=auto\" alt=\"img\" width=\"200\"></div>\n\n<p>其次 Http 协议的另一个特点，浏览器只能主动发送请求接收信息，不能被动接收服务器信息。这一点确实蛋疼，使得一旦数据有了变化我需要自己去请求，但是我又怎么知道数据什么时候更新了呢？</p>\n<p>然鹅，websocket 的出现就可以巧妙的解决这些问题。</p>\n<p>websocket 协由握手和数据传输构成</p>\n<p>握手基于 HTTP 协议，然后客户端和服务端实现长连接，所以说 websocket 和 http 是有交集的。</p>\n<p><img src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/12570/6651f2f811ec133b0e6d7e6d0e194b4c_720w.webp\" alt=\"关系图\"></p>\n<p>那么数据如何传输呢？只需要在服务端设立转发的服务，那么数据就可以实现从 A 客户端到 B 客户端的发送，拿聊天举例，正是这种长连接机制以及允许客户端主动接收服务端消息的机制使得聊天消息能够看上去好像在两个客户端建立了连接。其实就是服务器做了一次转发。</p>\n<h4 id=\"Java-怎么写服务端的-WebSocket（SpringBoot）\"><a href=\"#Java-怎么写服务端的-WebSocket（SpringBoot）\" class=\"headerlink\" title=\"Java 怎么写服务端的 WebSocket（SpringBoot）\"></a>Java 怎么写服务端的 WebSocket（SpringBoot）</h4><p>非常类似 Servlet，这里我们需要写<strong>ServerEndPoint</strong></p>\n<p>这里我们主要重写三个方法</p>\n<ol>\n<li>onOpen(建立连接时自动调用)</li>\n<li>onMessage(接收消息时自动调用)</li>\n<li>onClose(关闭连接时自动调用)</li>\n</ol>\n<p>当然还有 onError 等方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Java\"><span class=\"hljs-comment\">//这个 注解类似http的map ，比如说这样你的 websocket url 就是 ws：localhost/chat</span><br><span class=\"hljs-meta\">@ServerEndpoint(value = &quot;/chat&quot;,configurator = GetHttpSessionConfigurator.class)</span><br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ChatEndPoint</span> &#123;<br><br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     *  建立连接被调</span><br><span class=\"hljs-comment\">     */</span><br><br>    <span class=\"hljs-meta\">@OnOpen</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">onOpen</span><span class=\"hljs-params\">(Session session, EndpointConfig config)</span>&#123;<br><br><br><br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 接收数据被调用</span><br><span class=\"hljs-comment\">     */</span><br><br>    <span class=\"hljs-meta\">@OnMessage</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">onMessage</span><span class=\"hljs-params\">(String message,Session session)</span>&#123;<br><br><br><br><br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 关闭连接调用</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@OnClose</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">onClose</span><span class=\"hljs-params\">(Session session)</span>&#123;<br><br><br><br>    &#125;<br><br><br><br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<p>这里需要注意，上面 session 指的是 websocket 的 session，不是 http 的 session，也是用来标识每一个长连接的对象，看到这里聪明的小伙伴应该能想到实现消息转发可以用 session 来标识每一个用户。</p>\n<p>所以我们想要实现聊天消息转发可以使用 map 来存储 websocket 的 session。这里我存储 EndPoint 实例类似，因为我们可以使用 endpoint 实例来获取 session 对象，记住每一个用户进行一次 websocket 长连接，就会创建一个 endpoint 对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">    * 用来存储每个客户端对象对应的ChatEndpoint对象 key 是uid</span><br><span class=\"hljs-comment\">    */</span><br>   <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> Map&lt;String,ChatEndPoint&gt; users = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ConcurrentHashMap</span>&lt;&gt;();<br></code></pre></td></tr></table></figure>\n\n<p>说到这里有小伙伴想问了，项目的一些数据存储在 HttpSession 中既然 websocket 是基于 http 的，那么我能不能取出 Httpsession 在 Endpoint 里使用啊？答案是可以的，只需要在 springboot 配置中在注入对象前 ServerEndpointConfig 放入这个 httpsession 就可以了</p>\n<p>配置：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Java\"><span class=\"hljs-meta\">@Configuration</span><br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">WebSocketConfig</span> &#123;<br>    <span class=\"hljs-meta\">@Bean</span><br>    <span class=\"hljs-keyword\">public</span> ServerEndpointExporter <span class=\"hljs-title function_\">serverEndpointExporter</span><span class=\"hljs-params\">()</span>&#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ServerEndpointExporter</span>();<br>    &#125;<br>&#125;<br><br><br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">GetHttpSessionConfigurator</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">ServerEndpointConfig</span>.Configurator &#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">modifyHandshake</span><span class=\"hljs-params\">(ServerEndpointConfig sec, HandshakeRequest request, HandshakeResponse response)</span> &#123;<br>        <span class=\"hljs-type\">HttpSession</span> <span class=\"hljs-variable\">httpSession</span> <span class=\"hljs-operator\">=</span> (HttpSession)request.getHttpSession();<br><br>        <span class=\"hljs-comment\">//将httpsession存到配置对象</span><br><br>        sec.getUserProperties().put(HttpSession.class.getName(),httpSession);<br>    &#125;<br>&#125;<br><br><span class=\"hljs-meta\">@ServerEndpoint(value = &quot;/chat&quot;,configurator = GetHttpSessionConfigurator.class)</span><br><br></code></pre></td></tr></table></figure>\n\n<p>获取：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Java\"><span class=\"hljs-meta\">@OnOpen</span><br>   <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">onOpen</span><span class=\"hljs-params\">(Session session, EndpointConfig config)</span>&#123;<br><br>       <span class=\"hljs-built_in\">this</span>.session = session;<br><br>       <span class=\"hljs-comment\">//获取Httpssion</span><br><br>      <span class=\"hljs-type\">HttpSession</span> <span class=\"hljs-variable\">httpSession</span> <span class=\"hljs-operator\">=</span> (HttpSession) \tconfig.getUserProperties().get(HttpSession.class.getName());<br>      &#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"前端怎么写-WebSocket\"><a href=\"#前端怎么写-WebSocket\" class=\"headerlink\" title=\"前端怎么写 WebSocket\"></a>前端怎么写 WebSocket</h4><p>前端其实也类似，写起来更简单，只需要 new 一个 websocket 对象就能够实现连接。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Typescript\"><span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">ws</span>: <span class=\"hljs-built_in\">any</span> = <span class=\"hljs-literal\">null</span>;<br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;<br>\t<span class=\"hljs-comment\">//连接</span><br>  <span class=\"hljs-title function_\">connect</span>(<span class=\"hljs-params\"></span>) &#123;<br>    ws = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">WebSocket</span>(<span class=\"hljs-string\">&#x27;ws://localhost:8081/api/chat&#x27;</span>);<br>  &#125;,<br>\t<span class=\"hljs-comment\">//获取实例</span><br>  <span class=\"hljs-title function_\">getWs</span>(<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-keyword\">return</span> ws;<br>  &#125;,<br>  <span class=\"hljs-comment\">//关闭连接，删除实例</span><br><br>  <span class=\"hljs-title function_\">removeWs</span>(<span class=\"hljs-params\"></span>) &#123;<br>    ws.<span class=\"hljs-title function_\">close</span>();<br>  &#125;,<br>&#125;;<br><br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Typescript\"><span class=\"hljs-comment\">//调用方法</span><br>ws.<span class=\"hljs-title function_\">connect</span>();<br><br>  ws.<span class=\"hljs-title function_\">getWs</span>().<span class=\"hljs-property\">onopen</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br><br>  &#125;;<br><br>  ws.<span class=\"hljs-title function_\">getWs</span>().<span class=\"hljs-property\">onmessage</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">evt</span>) &#123;<br>  &#125;<br>  ws.<span class=\"hljs-title function_\">getWs</span>().<span class=\"hljs-property\">onclose</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br><br>  &#125;;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"聊天怎么实现\"><a href=\"#聊天怎么实现\" class=\"headerlink\" title=\"聊天怎么实现\"></a>聊天怎么实现</h4><p>思路</p>\n<ol>\n<li> 每一个客户端与服务端建立连接就将 EndPoint 实例存入 userHashMap（这里使用静态的）中。</li>\n<li> 客户端断开连接，就将此用户从 userHashMap 去除，所以 userHashMap 始终存储在线用户</li>\n<li> 客户端发消息，消息内容需要有发消息人，收消息人，内容，时间，封装成一个对象。</li>\n<li> 服务端 onmessage 接收到就检查用户里 userHashMap 有没有此人（有表示在线），有就找到 session 直接转发给他，没有需要暂时存储到 chatsHashMap，存消息列表 。</li>\n<li> 那么我们还要修改 1 步骤，这里连接上就要检查 chatsHashMap 有没有自己的消息，有就转发给自己并去除 chatsHashMap 的消息，这样一来就实现了离线和在线用户的聊天功能。</li>\n</ol>\n<p>后端全部代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><br><span class=\"hljs-meta\">@Component</span><br><span class=\"hljs-meta\">@ServerEndpoint(value = &quot;/chat&quot;,configurator = GetHttpSessionConfigurator.class)</span><br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ChatEndPoint</span> &#123;<br><br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 用来存储每个客户端对象对应的ChatEndpoint对象 key 是uid</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> Map&lt;String,ChatEndPoint&gt; users = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ConcurrentHashMap</span>&lt;&gt;();<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     *  用来存储每个客户端对象对应的聊天记录 key 是uid value 是json</span><br><span class=\"hljs-comment\">     */</span><br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> Map&lt;String, ArrayList&lt;String&gt;&gt; chats = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ConcurrentHashMap</span>&lt;&gt;();<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * websocket session</span><br><span class=\"hljs-comment\">     */</span><br><br>    <span class=\"hljs-keyword\">private</span>  Session session;<br><br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * httpsession</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">private</span> HttpSession httpSession;<br><br><br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     *  建立连接被调</span><br><span class=\"hljs-comment\">     */</span><br><br>    <span class=\"hljs-meta\">@OnOpen</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">onOpen</span><span class=\"hljs-params\">(Session session, EndpointConfig config)</span>&#123;<br><br>        <span class=\"hljs-built_in\">this</span>.session = session;<br><br>        <span class=\"hljs-comment\">//获取Httpssion</span><br><br>       <span class=\"hljs-type\">HttpSession</span> <span class=\"hljs-variable\">httpSession</span> <span class=\"hljs-operator\">=</span> (HttpSession) config.getUserProperties().get(HttpSession.class.getName());<br><br>       <span class=\"hljs-built_in\">this</span>.httpSession = httpSession;<br><br><br>       <span class=\"hljs-type\">User</span> <span class=\"hljs-variable\">user</span> <span class=\"hljs-operator\">=</span> (User)httpSession.getAttribute(USER_LOGIN_STATE);<br><br><br><br>        <span class=\"hljs-comment\">// 将当前对象存储在 容器中 key为uid</span><br><br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">uid</span> <span class=\"hljs-operator\">=</span> String.valueOf(user.getUid());<br><br>       users.put(uid,<span class=\"hljs-built_in\">this</span>);<br><br>       <span class=\"hljs-comment\">// 判断并建立 暂存 聊天记录的数据结构</span><br><br>       <span class=\"hljs-keyword\">if</span>(!chats.containsKey(uid)) &#123;<br><br>           ArrayList&lt;String&gt; arr = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();<br>           System.out.println(uid+<span class=\"hljs-string\">&quot;调用了一次&quot;</span>);<br>           chats.put(uid,arr);<br><br>       &#125;<br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">message</span> <span class=\"hljs-operator\">=</span> MessageUtils.getMessage(<span class=\"hljs-literal\">true</span>, <span class=\"hljs-literal\">null</span>,<span class=\"hljs-literal\">null</span>,<span class=\"hljs-literal\">null</span>, getUsers());<br><br>        System.out.println(message);<br>        <span class=\"hljs-comment\">//连接就一条广播</span><br>        broadcastAllUsers(MessageUtils.getMessage(<span class=\"hljs-literal\">true</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-literal\">null</span>,<span class=\"hljs-literal\">null</span>,<span class=\"hljs-string\">&quot;当前在线用户人数：&quot;</span>+users.size()+<span class=\"hljs-string\">&quot;人&quot;</span>));<br>        broadcastAllUsers(message);<br><br>        <span class=\"hljs-comment\">//获取该用户暂存离线消息并推送</span><br><br>        ArrayList&lt;String&gt; chatCache = chats.get(uid);<br><br><br>        <span class=\"hljs-keyword\">for</span>(String chat:chatCache)&#123;<br><span class=\"hljs-comment\">//            ChatEndPoint chatEndPoint = users.get(uid);</span><br><span class=\"hljs-comment\">//            System.out.println(chat);</span><br>            <span class=\"hljs-keyword\">try</span> &#123;<br>                <span class=\"hljs-built_in\">this</span>.session.getBasicRemote().sendText(chat);<br>            &#125; <span class=\"hljs-keyword\">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>        chats.remove(uid);<br><br><br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 获取容器里的用户</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span></span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">private</span> Set&lt;String&gt; <span class=\"hljs-title function_\">getUsers</span><span class=\"hljs-params\">()</span>&#123;<br><br>        <span class=\"hljs-keyword\">return</span> ChatEndPoint.users.keySet();<br><br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 推送所有客户端</span><br><span class=\"hljs-comment\">     */</span><br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">broadcastAllUsers</span><span class=\"hljs-params\">(String message)</span>&#123;<br><br>        Set&lt;String&gt; usersSet = users.keySet();<br>            <span class=\"hljs-keyword\">try</span> &#123;<br><br>                <span class=\"hljs-keyword\">for</span> (String user : usersSet) &#123;<br>                    <span class=\"hljs-type\">ChatEndPoint</span> <span class=\"hljs-variable\">chatEndPoint</span> <span class=\"hljs-operator\">=</span> users.get(user);<br>                    chatEndPoint.session.getBasicRemote().sendText(message);<br>                &#125;&#125; <span class=\"hljs-keyword\">catch</span>(IOException e)&#123;<br>                    e.printStackTrace();<br>                &#125;<br><br><br>            &#125;<br><br><br><br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 接收数据被调用</span><br><span class=\"hljs-comment\">     */</span><br><br>    <span class=\"hljs-meta\">@OnMessage</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">onMessage</span><span class=\"hljs-params\">(String message,Session session)</span>&#123;<br><br><br>        <span class=\"hljs-type\">ObjectMapper</span> <span class=\"hljs-variable\">mapper</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ObjectMapper</span>();<br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            <span class=\"hljs-type\">Message</span> <span class=\"hljs-variable\">mess</span> <span class=\"hljs-operator\">=</span> mapper.readValue(message, Message.class);<br><br><span class=\"hljs-comment\">//            System.out.println(mess);</span><br><span class=\"hljs-comment\">// 消息的接收者</span><br>            <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">toUid</span> <span class=\"hljs-operator\">=</span> mess.getToUid();<br><br>            <span class=\"hljs-type\">ChatEndPoint</span> <span class=\"hljs-variable\">chatEndPoint</span> <span class=\"hljs-operator\">=</span> users.get(toUid);<br><br>            <span class=\"hljs-type\">User</span> <span class=\"hljs-variable\">user</span> <span class=\"hljs-operator\">=</span> (User)httpSession.getAttribute(USER_LOGIN_STATE);<br><br><br><br>            <span class=\"hljs-keyword\">if</span>(chatEndPoint!=<span class=\"hljs-literal\">null</span>)&#123;<br><br>                <span class=\"hljs-comment\">// 接收用户在线直接转发</span><br><br><br><br>                <span class=\"hljs-keyword\">if</span>(user==<span class=\"hljs-literal\">null</span>)&#123;<br><br>                    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BusinessException</span>(ErrorCode.LOGIN_ERROR);<br>                &#125;<br><br>                <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">message1</span> <span class=\"hljs-operator\">=</span> MessageUtils.getMessage(<span class=\"hljs-literal\">false</span>, user.getUserName(), user.getUid(),user.getPhone(), mess);<br><br>                chatEndPoint.session.getBasicRemote().sendText(message1);<br><br><br><br>            &#125;<span class=\"hljs-keyword\">else</span>&#123;<br><br>                <span class=\"hljs-comment\">//接收用户不在线 先暂时存储消息</span><br><br>                ArrayList&lt;String&gt; messages = chats.get(toUid);<br><br>                <span class=\"hljs-keyword\">if</span>(messages == <span class=\"hljs-literal\">null</span>)&#123;<br>                    messages = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();<br>                    chats.put(toUid,messages);<br><br>                &#125;<br><br>                <span class=\"hljs-comment\">//存的就是json</span><br>                messages.add(MessageUtils.getMessage(<span class=\"hljs-literal\">false</span>, user.getUserName(), user.getUid(),user.getPhone(), mess));<br><br><br><br>            &#125;<br><br><br><br>        &#125; <span class=\"hljs-keyword\">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br><br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 关闭连接调用</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@OnClose</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">onClose</span><span class=\"hljs-params\">(Session session)</span>&#123;<br><br><br>        <span class=\"hljs-type\">User</span> <span class=\"hljs-variable\">user</span> <span class=\"hljs-operator\">=</span> (User)httpSession.getAttribute(USER_LOGIN_STATE);<br><br>        users.remove(user.getUid().toString());<br><br>        System.out.println(user.getUserName()+<span class=\"hljs-string\">&quot;下线了，当前在线人数：&quot;</span>+users.size()+<span class=\"hljs-string\">&quot;人&quot;</span>);<br><br><br><br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 获取当前时间戳，秒</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">private</span> String <span class=\"hljs-title function_\">getUnix</span><span class=\"hljs-params\">()</span>&#123;<br><br>        <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">time</span> <span class=\"hljs-operator\">=</span> System.currentTimeMillis();<br><br><br>        time = time / <span class=\"hljs-number\">1000</span>;<br><br>        <span class=\"hljs-keyword\">return</span> String.valueOf(time);<br><br>    &#125;<br><br><br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<p>前端接收怎么存储呢？我暂时只想到存储在 sessionStorage 或者 localStorage 中，但这部分数据存储需要考虑去重和数据对应每个用户，不要疏忽了让别的用户看到了不属于自己的对话内容，那就出大问题了。整体思路挺简单的就是要细心。</p>\n<h4 id=\"实现展示\"><a href=\"#实现展示\" class=\"headerlink\" title=\"实现展示\"></a>实现展示</h4><p><img src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/12570/image-20221125171042690.png\" alt=\"image-20221125171042690\"></p>\n<p><img src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/12570/image-20221125171211620.png\" alt=\"image-20221125171211620\"></p>\n<p><img src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/12570/image-20221125171244569.png\" alt=\"image-20221125171244569\"></p>\n<p>组件采用的是 react-jwchat 感觉挺好看的，各项功能都正常，就是有时候会 websocket 连接了就断开了，猜测是没写 error 处理吧。</p>\n<h4 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h4><p>最后看我的二手交易系统的前后端源码（websocket 源码也在里面）</p>\n<p><a href=\"https://gitee.com/wx_504ae56474/react-jwchat\">react-jwchat 聊天组件</a></p>\n<p><a href=\"https://gitee.com/yilinyo/lkd-javee-trade-frontend\">二手交易系统前端</a></p>\n<p><a href=\"https://gitee.com/yilinyo/lkd-javaee-trade-backend\">二手交易系统后端</a></p>\n"},{"title":"鱼皮用户中心收获","_content":"# 鱼皮用户中心收获\n\n用户中心花了大概30+小时 看了🐟所有视频\n\n借鉴了部分同学的 笔记 ，虽然这种项目以前也做过，很多东西之前也体验过，但还是一步一步地 跟着来了一边完整的，收获确实很多。同时这个过程还额外自己补了很多细节基础。\n\n### 后端\n\n首先最大的收获应该 不是代码层面的 因为业务很简单就是普通的对用户表的crud，而应该是整个 后端Java 的开发流程和规范 ，比如一些工具类，请求类，错误类的封装，这里尤其有收获的是 business错误类的引入 和  GlobelExceptionHandel 引入来处理错误信息 来像前端提供规范以及安全接口数据。其次就是 一些逻辑上的细节，还有一些敏捷开发的插件。整个后端 构建的流程和过程是很有意义的。\n\n### 前端\n\n然后就是前端方面的一些，这里之前只有简单三件套的基础，虽然能听懂，但还是促使我去稍微入门学习了 一下Vue、React 还有TS ，框架上手很简单但不熟练，所以看ant design pro 和 umi我看了好几遍，勉强能简单应用，在前端视频中 我觉得比较重要的收获是 前端这些主流框架的 项目结构 ，无论是Vue react还是umi 其实都差不多，所以听一遍理解其它很快捷，然后就是ts的细节了，ts确实对java程序员很友好，学了ts的一些语法理解ant design pro 非常的便捷，然后在前端的细节其实有很多，比如api的封装以及组件库的复用、路由的利用、生产模式对proxy代理的利用、以及异步axios请求（umi里的REQUEST）请求拦截器、响应拦截器、基础配置等等。总而言之，前端总是很细。\n\n### 登录\n\n哦，有一点就是登录保持登陆状态这个以前没系统学，利用这个antdesign 的框架大概熟悉了 整个流程 和 如何实现前后端 ，之前笔记有提到。\n\n\n\n### 多环境\n\n多环境指的是在前端和后端要配置 多种环境的数据 （数据库、消息队列、redis、端口）在启动时可供选择\n\n\n\n### 部署上线\n\n然后就是部署上线\n\n这里 基础的几个方式我就不讲了，主要收获应该是Docker容器部署吧，因为很早就想学了但是一直没机会.Docker 其实就是 服务器里的清新小服务器（有自己的端口、目录啥） ，在里面下环境只需要几行代码 ，然后我们利用镜像来打包 代码和环境，这样形成一个又一个的小软件就能够 通过Docker 来运行，方便快捷且独立。\n\n\n\n### 跨域问题\n\n然后是跨域问题\n\n之前解决过跨域问题，但没有带cookie这次带了cookie 由于做nginx之前没看鱼皮视频 自己搞了半天 踩了好多坑，这里的收获就是前端携带 cookie 就必须要在后端设置 返回头要带上 几个重要的头，尤其是cookie要设置path和当前请求url保持一致 ，这样setcookie才会生效。这里Nginx反向代理需要配置正常\n\n然后还有不使用反向代理，直接后端也有几种解决方法。\n\n\n\n### 写在最后\n\n然后我也自己拓展了一些接口比如查询等等\n\n这个项目应该会成为后面项目用户的数据中心吧，可以更单多的拓展。\n\n最后也希望以后写自己项目时时刻要提醒自己这些规范，以后要多回来看看，感谢鱼皮。\n\n\n\n\n\n","source":"_posts/鱼皮用户中心收获.md","raw":"---\ntitle: 鱼皮用户中心收获\ntag: 心得\n---\n# 鱼皮用户中心收获\n\n用户中心花了大概30+小时 看了🐟所有视频\n\n借鉴了部分同学的 笔记 ，虽然这种项目以前也做过，很多东西之前也体验过，但还是一步一步地 跟着来了一边完整的，收获确实很多。同时这个过程还额外自己补了很多细节基础。\n\n### 后端\n\n首先最大的收获应该 不是代码层面的 因为业务很简单就是普通的对用户表的crud，而应该是整个 后端Java 的开发流程和规范 ，比如一些工具类，请求类，错误类的封装，这里尤其有收获的是 business错误类的引入 和  GlobelExceptionHandel 引入来处理错误信息 来像前端提供规范以及安全接口数据。其次就是 一些逻辑上的细节，还有一些敏捷开发的插件。整个后端 构建的流程和过程是很有意义的。\n\n### 前端\n\n然后就是前端方面的一些，这里之前只有简单三件套的基础，虽然能听懂，但还是促使我去稍微入门学习了 一下Vue、React 还有TS ，框架上手很简单但不熟练，所以看ant design pro 和 umi我看了好几遍，勉强能简单应用，在前端视频中 我觉得比较重要的收获是 前端这些主流框架的 项目结构 ，无论是Vue react还是umi 其实都差不多，所以听一遍理解其它很快捷，然后就是ts的细节了，ts确实对java程序员很友好，学了ts的一些语法理解ant design pro 非常的便捷，然后在前端的细节其实有很多，比如api的封装以及组件库的复用、路由的利用、生产模式对proxy代理的利用、以及异步axios请求（umi里的REQUEST）请求拦截器、响应拦截器、基础配置等等。总而言之，前端总是很细。\n\n### 登录\n\n哦，有一点就是登录保持登陆状态这个以前没系统学，利用这个antdesign 的框架大概熟悉了 整个流程 和 如何实现前后端 ，之前笔记有提到。\n\n\n\n### 多环境\n\n多环境指的是在前端和后端要配置 多种环境的数据 （数据库、消息队列、redis、端口）在启动时可供选择\n\n\n\n### 部署上线\n\n然后就是部署上线\n\n这里 基础的几个方式我就不讲了，主要收获应该是Docker容器部署吧，因为很早就想学了但是一直没机会.Docker 其实就是 服务器里的清新小服务器（有自己的端口、目录啥） ，在里面下环境只需要几行代码 ，然后我们利用镜像来打包 代码和环境，这样形成一个又一个的小软件就能够 通过Docker 来运行，方便快捷且独立。\n\n\n\n### 跨域问题\n\n然后是跨域问题\n\n之前解决过跨域问题，但没有带cookie这次带了cookie 由于做nginx之前没看鱼皮视频 自己搞了半天 踩了好多坑，这里的收获就是前端携带 cookie 就必须要在后端设置 返回头要带上 几个重要的头，尤其是cookie要设置path和当前请求url保持一致 ，这样setcookie才会生效。这里Nginx反向代理需要配置正常\n\n然后还有不使用反向代理，直接后端也有几种解决方法。\n\n\n\n### 写在最后\n\n然后我也自己拓展了一些接口比如查询等等\n\n这个项目应该会成为后面项目用户的数据中心吧，可以更单多的拓展。\n\n最后也希望以后写自己项目时时刻要提醒自己这些规范，以后要多回来看看，感谢鱼皮。\n\n\n\n\n\n","slug":"鱼皮用户中心收获","published":1,"date":"2022-11-26T11:48:40.200Z","updated":"2022-11-26T11:49:38.366Z","_id":"claxvcuay0000w4tnfz07hmxi","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"鱼皮用户中心收获\"><a href=\"#鱼皮用户中心收获\" class=\"headerlink\" title=\"鱼皮用户中心收获\"></a>鱼皮用户中心收获</h1><p>用户中心花了大概30+小时 看了🐟所有视频</p>\n<p>借鉴了部分同学的 笔记 ，虽然这种项目以前也做过，很多东西之前也体验过，但还是一步一步地 跟着来了一边完整的，收获确实很多。同时这个过程还额外自己补了很多细节基础。</p>\n<h3 id=\"后端\"><a href=\"#后端\" class=\"headerlink\" title=\"后端\"></a>后端</h3><p>首先最大的收获应该 不是代码层面的 因为业务很简单就是普通的对用户表的crud，而应该是整个 后端Java 的开发流程和规范 ，比如一些工具类，请求类，错误类的封装，这里尤其有收获的是 business错误类的引入 和  GlobelExceptionHandel 引入来处理错误信息 来像前端提供规范以及安全接口数据。其次就是 一些逻辑上的细节，还有一些敏捷开发的插件。整个后端 构建的流程和过程是很有意义的。</p>\n<h3 id=\"前端\"><a href=\"#前端\" class=\"headerlink\" title=\"前端\"></a>前端</h3><p>然后就是前端方面的一些，这里之前只有简单三件套的基础，虽然能听懂，但还是促使我去稍微入门学习了 一下Vue、React 还有TS ，框架上手很简单但不熟练，所以看ant design pro 和 umi我看了好几遍，勉强能简单应用，在前端视频中 我觉得比较重要的收获是 前端这些主流框架的 项目结构 ，无论是Vue react还是umi 其实都差不多，所以听一遍理解其它很快捷，然后就是ts的细节了，ts确实对java程序员很友好，学了ts的一些语法理解ant design pro 非常的便捷，然后在前端的细节其实有很多，比如api的封装以及组件库的复用、路由的利用、生产模式对proxy代理的利用、以及异步axios请求（umi里的REQUEST）请求拦截器、响应拦截器、基础配置等等。总而言之，前端总是很细。</p>\n<h3 id=\"登录\"><a href=\"#登录\" class=\"headerlink\" title=\"登录\"></a>登录</h3><p>哦，有一点就是登录保持登陆状态这个以前没系统学，利用这个antdesign 的框架大概熟悉了 整个流程 和 如何实现前后端 ，之前笔记有提到。</p>\n<h3 id=\"多环境\"><a href=\"#多环境\" class=\"headerlink\" title=\"多环境\"></a>多环境</h3><p>多环境指的是在前端和后端要配置 多种环境的数据 （数据库、消息队列、redis、端口）在启动时可供选择</p>\n<h3 id=\"部署上线\"><a href=\"#部署上线\" class=\"headerlink\" title=\"部署上线\"></a>部署上线</h3><p>然后就是部署上线</p>\n<p>这里 基础的几个方式我就不讲了，主要收获应该是Docker容器部署吧，因为很早就想学了但是一直没机会.Docker 其实就是 服务器里的清新小服务器（有自己的端口、目录啥） ，在里面下环境只需要几行代码 ，然后我们利用镜像来打包 代码和环境，这样形成一个又一个的小软件就能够 通过Docker 来运行，方便快捷且独立。</p>\n<h3 id=\"跨域问题\"><a href=\"#跨域问题\" class=\"headerlink\" title=\"跨域问题\"></a>跨域问题</h3><p>然后是跨域问题</p>\n<p>之前解决过跨域问题，但没有带cookie这次带了cookie 由于做nginx之前没看鱼皮视频 自己搞了半天 踩了好多坑，这里的收获就是前端携带 cookie 就必须要在后端设置 返回头要带上 几个重要的头，尤其是cookie要设置path和当前请求url保持一致 ，这样setcookie才会生效。这里Nginx反向代理需要配置正常</p>\n<p>然后还有不使用反向代理，直接后端也有几种解决方法。</p>\n<h3 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h3><p>然后我也自己拓展了一些接口比如查询等等</p>\n<p>这个项目应该会成为后面项目用户的数据中心吧，可以更单多的拓展。</p>\n<p>最后也希望以后写自己项目时时刻要提醒自己这些规范，以后要多回来看看，感谢鱼皮。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"鱼皮用户中心收获\"><a href=\"#鱼皮用户中心收获\" class=\"headerlink\" title=\"鱼皮用户中心收获\"></a>鱼皮用户中心收获</h1><p>用户中心花了大概30+小时 看了🐟所有视频</p>\n<p>借鉴了部分同学的 笔记 ，虽然这种项目以前也做过，很多东西之前也体验过，但还是一步一步地 跟着来了一边完整的，收获确实很多。同时这个过程还额外自己补了很多细节基础。</p>\n<h3 id=\"后端\"><a href=\"#后端\" class=\"headerlink\" title=\"后端\"></a>后端</h3><p>首先最大的收获应该 不是代码层面的 因为业务很简单就是普通的对用户表的crud，而应该是整个 后端Java 的开发流程和规范 ，比如一些工具类，请求类，错误类的封装，这里尤其有收获的是 business错误类的引入 和  GlobelExceptionHandel 引入来处理错误信息 来像前端提供规范以及安全接口数据。其次就是 一些逻辑上的细节，还有一些敏捷开发的插件。整个后端 构建的流程和过程是很有意义的。</p>\n<h3 id=\"前端\"><a href=\"#前端\" class=\"headerlink\" title=\"前端\"></a>前端</h3><p>然后就是前端方面的一些，这里之前只有简单三件套的基础，虽然能听懂，但还是促使我去稍微入门学习了 一下Vue、React 还有TS ，框架上手很简单但不熟练，所以看ant design pro 和 umi我看了好几遍，勉强能简单应用，在前端视频中 我觉得比较重要的收获是 前端这些主流框架的 项目结构 ，无论是Vue react还是umi 其实都差不多，所以听一遍理解其它很快捷，然后就是ts的细节了，ts确实对java程序员很友好，学了ts的一些语法理解ant design pro 非常的便捷，然后在前端的细节其实有很多，比如api的封装以及组件库的复用、路由的利用、生产模式对proxy代理的利用、以及异步axios请求（umi里的REQUEST）请求拦截器、响应拦截器、基础配置等等。总而言之，前端总是很细。</p>\n<h3 id=\"登录\"><a href=\"#登录\" class=\"headerlink\" title=\"登录\"></a>登录</h3><p>哦，有一点就是登录保持登陆状态这个以前没系统学，利用这个antdesign 的框架大概熟悉了 整个流程 和 如何实现前后端 ，之前笔记有提到。</p>\n<h3 id=\"多环境\"><a href=\"#多环境\" class=\"headerlink\" title=\"多环境\"></a>多环境</h3><p>多环境指的是在前端和后端要配置 多种环境的数据 （数据库、消息队列、redis、端口）在启动时可供选择</p>\n<h3 id=\"部署上线\"><a href=\"#部署上线\" class=\"headerlink\" title=\"部署上线\"></a>部署上线</h3><p>然后就是部署上线</p>\n<p>这里 基础的几个方式我就不讲了，主要收获应该是Docker容器部署吧，因为很早就想学了但是一直没机会.Docker 其实就是 服务器里的清新小服务器（有自己的端口、目录啥） ，在里面下环境只需要几行代码 ，然后我们利用镜像来打包 代码和环境，这样形成一个又一个的小软件就能够 通过Docker 来运行，方便快捷且独立。</p>\n<h3 id=\"跨域问题\"><a href=\"#跨域问题\" class=\"headerlink\" title=\"跨域问题\"></a>跨域问题</h3><p>然后是跨域问题</p>\n<p>之前解决过跨域问题，但没有带cookie这次带了cookie 由于做nginx之前没看鱼皮视频 自己搞了半天 踩了好多坑，这里的收获就是前端携带 cookie 就必须要在后端设置 返回头要带上 几个重要的头，尤其是cookie要设置path和当前请求url保持一致 ，这样setcookie才会生效。这里Nginx反向代理需要配置正常</p>\n<p>然后还有不使用反向代理，直接后端也有几种解决方法。</p>\n<h3 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h3><p>然后我也自己拓展了一些接口比如查询等等</p>\n<p>这个项目应该会成为后面项目用户的数据中心吧，可以更单多的拓展。</p>\n<p>最后也希望以后写自己项目时时刻要提醒自己这些规范，以后要多回来看看，感谢鱼皮。</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"claxuyez90000q8tn5ncr6e9h","tag_id":"claxuyu370001q8tnfu08fqf9","_id":"claxuyu370002q8tnhceh5vam"},{"post_id":"claxvcuay0000w4tnfz07hmxi","tag_id":"claxve36m0001w4tn7lsebin6","_id":"claxve36n0002w4tn3y53cqml"}],"Tag":[{"name":"项目","_id":"claxuyu370001q8tnfu08fqf9"},{"name":"心得","_id":"claxve36m0001w4tn7lsebin6"}]}}